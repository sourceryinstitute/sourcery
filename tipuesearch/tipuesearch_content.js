var tipuesearch = {"pages":[{"title":" ","text":"Sourcery Library A grab bag of useful tricks in Fortran 2023. - : /+- . / oydddy / . . / sdmNNmmdh / . / odNNmNmyshdh / . -+ ymNNmmms ... ohy . . + odmNNmdmm + . ... -+ sdmNNNmdmmo . /+ ydmNNNmddmms - -+ ohmmNNNNmddmmy : /+ ohmmNNNNmdhdmmy / . . ++ shdmNNNNNmdhdmmh / . : /+ shdmmNNNNmdhhmmmy / . . +/+ shdmmNNNNNmdhdmmm ## ............. -//+ shdmmNNNNNmdhyyy ## -- sssssssssssso +- . .. - ## /+ shdmmmNNNNmhs / ## //+ sdhhhyyhddhso +++ : ..: oyh ## /+ shdmmmNNNds ## syyyyhhhhhhhdho - . .: oyhhdmh ## /+ shddmddy + ## + hdysoosyys /- .. . / ssssyhdmd : - ## ////// ## ndifmdhyooo +- : ooo + oosyhdmdyo + ###### ydmNNNNNmhs / . : +++///++ osyhhhdmmmmmNNNNNNNNmdo - +++//////+ oossshddmmmmmNNNmdy / . . ///////+++ oosyhhddmmmmddy / . .: ////+++ ossyyhhhhhs + :. --- .......... -- This library gathers software that developers at Archaeologic Inc. and Sourcery Institute find useful across many of our projects, including in\ncourses that we teach.  Most code starts here because it is too limited in \ncapability to release as a standalone package but too distinct in purpose to \nfold into other existing packages.  Over time, when code that starts here grows\nin capability, a new repository is born and the corresponding code is removed\nfrom the Sourcery repository.  Examples include the Assert and Emulators libraries.  Following the practice of semantic versioning , code removal\ncauses an increment in the major version number. Contents Procedures Array functions String functions User-defined collective subroutines Input/output format strings and format string generators Classes A command-line abstraction that searches for program arguments. A minimalistic unit testing framework based around four types (see ./test/main.f90 for a use case): test_t is a parent type to extend when defining unit tests, test_description_t encapsulates scalar test functions and test descriptoins, vector_test_description : encapsulates array-valued test functions and test descriptions. test_result_t encapsulates test deescriptions and boolean (pass/fail) outcomes, and Parallel data partitioning and gathering, (Co-) Object pattern abstract parent, Runtime units tracking, A test oracle using the Template Method pattern , and Documentation See the Sourcery GitHub Pages site for HTML documentation generated with [ ford ]: Prerequisites FORD 6.1.0 or later is required for producing HTML documentation (see\n\" Building the documentation \" below for instructions). The Fortran Package Manager ( fpm ) is required to build Sourcery from source. GCC ( gfortran ) 13.1.0 OpenCoarrays 2.10.1 for parallel execution See fpm manifest for the dependencies and developer dependencies,\nthat fpm automatically downloads and builds via the fpm command provided in\nthe \" Downloding, Building, and Testing \" section below. Downloding git clone git@github.com:sourceryinstitute/sourcery Building and Testing Test-Suite Usage Executing fpm test -- --help prints the following message: Usage : fpm test -- [-- help ] | [-- contains < substring >] where square brackets ([]) denote optional arguments , a pipe (|) separates alternative arguments , angular brackets (<>) denote a user - provided value , and passing a substring limits execution to the tests with test subjects or test descriptions containing the user - specified substring . GNU Fortran ( gfortran )  compiler Single-image (serial) testing With recent versions of GNU Fortran (gfortran) and OpenCoarrays installed, \nexecute the following command in a zsh or bash -like shell: fpm test Multi-image (parallel) testing With recent versions of gfortran and OpenCoarrays installed, \nexecute the following command in a zsh or bash -like shell: fpm test --compiler caf --runner \"cafrun -n 4\" Substitute the desired number of images for the 4 above. Intel ( ifx ) compiler fpm test --compiler ifx --flag \"-coarray\" Numerical Algorithms Group ( nagfor ) compiler fpm test --compiler nagfor --flag -fpp Building and testing with the Cray Compiler Environment (CCE) Because fpm uses the compiler name to determine the compiler identity and because\nCCE provides one compiler wrapper, ftn , for invoking all compilers, you will\nneed to invoke ftn in a shell script named to identify CCE compiler. For example,\nplace a script named crayftn.sh in your PATH with the following contents and with\nexecutable privileges set appropriately: #!/bin/bash ftn $@ Then build and test Sourcery with the command fpm test --compiler crayftn.sh Building and testing with other compilers To use Sourcery with other compilers, please submit an issue or pull request. Building the documentation After installing ford , execute the following command in a zsh or bash -like\nshell: ford doc/ford-documentation.md after which opening subdirectory doc/html/index.html in a browser displays the\ndocumentation. Developer Info Damian Rouson","tags":"home","loc":"index.html"},{"title":"test_result_t –  ","text":"type, public :: test_result_t Encapsulate test descriptions and outcomes Inherits type~~test_result_t~~InheritsGraph type~test_result_t test_result_t type~string_t string_t type~test_result_t->type~string_t description_ characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), public :: description_ logical, public :: passed_ Constructor public        interface test_result_t private elemental module function construct_from_character(description, passed) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) private elemental module function construct_from_string(description, passed) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) Type-Bound Procedures procedure, public :: characterize interface private pure module function characterize(self) result(characterization) Implementation → The result is a character description of the test and its outcome Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable procedure, public :: description_contains interface private elemental module function description_contains(self, substring) result(substring_found) Implementation → The result is true if and only if the test description contains the substring Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical procedure, public :: passed interface private impure elemental module function passed(self) result(test_passed) Implementation → The result is true if and only if the test passed on all images Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical","tags":"","loc":"type/test_result_t.html"},{"title":"co_object –  ","text":"type, public, abstract :: co_object Components Type Visibility Attributes Name Initial logical, private :: defined = .false. Default initialization indicates not yet user-defined logical, private, allocatable :: facilitate_type_extension [:] Type-Bound Procedures procedure, public :: mark_as_defined interface private pure module subroutine mark_as_defined(self) Implementation → Mark the co_object as user-defined Arguments Type Intent Optional Attributes Name class( co_object ), intent(inout) :: self procedure, public :: user_defined interface private pure module function user_defined(self) result(is_defined) Implementation → Return a boolean result indicating whether self co_object has been initialized since its declaration Arguments Type Intent Optional Attributes Name class( co_object ), intent(in) :: self Return Value logical","tags":"","loc":"type/co_object.html"},{"title":"test_t –  ","text":"type, public, abstract :: test_t Facilitate testing and test reporting Type-Bound Procedures procedure, public :: report interface private module subroutine report(test, passes, tests) Implementation → Print the test results and increment the tallies of passing tests and total tests Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests procedure( results_interface ), public, deferred, nopass :: results function results_interface() result(test_results) Prototype The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure Arguments None Return Value type( test_result_t ), allocatable, (:) procedure( subject_interface ), public, deferred, nopass :: subject pure function subject_interface() result(specimen) Prototype The result is the name of the test specimen (the subject of testing) Arguments None Return Value character(len=:), allocatable","tags":"","loc":"type/test_t.html"},{"title":"bin_t –  ","text":"type, public :: bin_t encapsulate a range of item numbers associated with a bin Inherited by type~~bin_t~~InheritedByGraph type~bin_t bin_t type~data_partition_t data_partition_t type~data_partition_t->type~bin_t bin Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial integer, private :: first_ integer, private :: last_ Constructor public        interface bin_t private elemental module function construct(num_items, num_bins, bin_number) result(bin) Implementation → the result is a bin associated with a range of item numbers Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) Type-Bound Procedures procedure, public :: first interface private elemental module function first(self) result(first_item_number) Implementation → the result is the first item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer procedure, public :: last interface private elemental module function last(self) result(last_item_number) Implementation → the result is the last item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","loc":"type/bin_t.html"},{"title":"oracle_t –  ","text":"type, public, abstract, extends( object_t ) :: oracle_t define procedures for testing output values against expected values Inherits type~~oracle_t~~InheritsGraph type~oracle_t oracle_t type~object_t object_t type~oracle_t->type~object_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Type-Bound Procedures procedure, public :: mark_as_defined interface private pure module subroutine mark_as_defined(self) Implementation → Mark the object as user-defined Arguments Type Intent Optional Attributes Name class( object_t ), intent(inout) :: self procedure( norm_interface ), public, deferred :: norm pure function norm_interface(self) result(norm_of_self) Prototype result is a norm of the array formed by concatenating the real components of self object Arguments Type Intent Optional Attributes Name class( oracle_t ), intent(in) :: self Return Value real generic, public :: operator(-) => subtract function subtract_interface(self, rhs) result(difference) Prototype result has components corresponding to subtracting rhs's components fron self object's components Arguments Type Intent Optional Attributes Name class( oracle_t ), intent(in) :: self class( oracle_t ), intent(in) :: rhs Return Value class( oracle_t ), allocatable procedure( subtract_interface ), public, deferred :: subtract function subtract_interface(self, rhs) result(difference) Prototype result has components corresponding to subtracting rhs's components fron self object's components Arguments Type Intent Optional Attributes Name class( oracle_t ), intent(in) :: self class( oracle_t ), intent(in) :: rhs Return Value class( oracle_t ), allocatable procedure, public :: user_defined interface private pure module function user_defined(self) result(is_defined) Implementation → Return a boolean result indicating whether self object has been initialized since its declaration Arguments Type Intent Optional Attributes Name class( object_t ), intent(in) :: self Return Value logical procedure, public :: within_tolerance interface private module function within_tolerance(self, reference, tolerance) result(in_tolerance) Implementation → template method with true result iff the difference in state vectors (self - reference) has a norm within tolerance\n(impure because of internal call to 'subtract' binding)\nThe existence of self procedure eliminates the need to rewrite similar code for every oracle child type. Arguments Type Intent Optional Attributes Name class( oracle_t ), intent(in) :: self class( oracle_t ), intent(in) :: reference real, intent(in) :: tolerance Return Value logical generic, public :: write(formatted) => write_formatted subroutine write_interface(self, unit, iotype, v_list, iostat, iomsg) Prototype Arguments Type Intent Optional Attributes Name class( object_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg procedure( write_interface ), public, deferred :: write_formatted subroutine write_interface(self, unit, iotype, v_list, iostat, iomsg) Prototype Arguments Type Intent Optional Attributes Name class( object_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","loc":"type/oracle_t.html"},{"title":"data_partition_t –  ","text":"type, public :: data_partition_t encapsulate a description of the data subset the executing image owns Inherits type~~data_partition_t~~InheritsGraph type~data_partition_t data_partition_t type~bin_t bin_t type~data_partition_t->type~bin_t bin Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( bin_t ), private, allocatable :: bin (:) Constructor public        interface data_partition_t private pure module function construct(cardinality) result(data_partition) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: cardinality Return Value type( data_partition_t ) Type-Bound Procedures procedure, public :: define_partitions interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private pure module subroutine define_partitions(self, cardinality) Implementation → define the range of data identification numbers owned by the executing image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(inout) :: self integer, intent(in) :: cardinality procedure, public :: first interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private pure module function first(self, image_number) result(first_index) Implementation → the result is the first identification number owned by the executing image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self integer, intent(in), optional :: image_number Return Value integer generic, public :: gather => gather_real32_2D_array , gather_real64_2D_array , gather_real32_1D_array , gather_real64_1D_array private  interface gather_real32_2D_array () Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. Arguments None private  interface gather_real64_2D_array () Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. Arguments None private  interface gather_real32_1D_array () Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. Arguments None private  interface gather_real64_1D_array () Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. Arguments None procedure, public :: last interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private pure module function last(self, image_number) result(last_index) Implementation → the result is the last identification number owned by the executing image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self integer, intent(in), optional :: image_number Return Value integer procedure, private :: gather_real32_1D_array interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private module subroutine gather_real32_1D_array(self, a, result_image, dim) Implementation → Gather the elements of an 1D array distributed along dimension dim onto result_image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real32), intent(inout) :: a (:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim procedure, private :: gather_real32_2D_array interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private module subroutine gather_real32_2D_array(self, a, result_image, dim) Implementation → Gather the elements of an 2D array distributed along dimension dim onto result_image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real32), intent(inout) :: a (:,:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim procedure, private :: gather_real64_1D_array interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private module subroutine gather_real64_1D_array(self, a, result_image, dim) Implementation → Gather the elements of an 1D array distributed along dimension dim onto result_image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real64), intent(inout) :: a (:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim procedure, private :: gather_real64_2D_array interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private module subroutine gather_real64_2D_array(self, a, result_image, dim) Implementation → Gather the elements of an 2D array distributed along dimension dim onto result_image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real64), intent(inout) :: a (:,:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim","tags":"","loc":"type/data_partition_t.html"},{"title":"object_t –  ","text":"type, public, abstract :: object_t Define an abstract parent type to ensure basic functionality expected to be provided by all non-abstract types.\nEach non-abstract type provides the functionality by extending self type and implementing its deferred binding(s).  This\ntype resembles java's Object class in the sense that it is intended to be the ultimate ancestor of every other type. Inherited by type~~object_t~~InheritedByGraph type~object_t object_t type~oracle_t oracle_t type~oracle_t->type~object_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial logical, private :: defined = .false. Default initialization indicates not yet user-defined Type-Bound Procedures procedure, public :: mark_as_defined interface private pure module subroutine mark_as_defined(self) Implementation → Mark the object as user-defined Arguments Type Intent Optional Attributes Name class( object_t ), intent(inout) :: self procedure, public :: user_defined interface private pure module function user_defined(self) result(is_defined) Implementation → Return a boolean result indicating whether self object has been initialized since its declaration Arguments Type Intent Optional Attributes Name class( object_t ), intent(in) :: self Return Value logical generic, public :: write(formatted) => write_formatted subroutine write_interface(self, unit, iotype, v_list, iostat, iomsg) Prototype Arguments Type Intent Optional Attributes Name class( object_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg procedure( write_interface ), public, deferred :: write_formatted subroutine write_interface(self, unit, iotype, v_list, iostat, iomsg) Prototype Arguments Type Intent Optional Attributes Name class( object_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"Morfeus-FD","loc":"type/object_t.html"},{"title":"command_line_t –  ","text":"type, public :: command_line_t Type-Bound Procedures procedure, public, nopass :: argument_present interface private module function argument_present(acceptable_argument) result(found) Implementation → result is .true. only if a command-line argument matches an element of this function's argument Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical procedure, public, nopass :: flag_value interface private module function flag_value(flag) Implementation → result is the value passed adjacent to a command-line flag Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable","tags":"","loc":"type/command_line_t.html"},{"title":"units –  ","text":"type, public :: units Morfeus universal base type for all units Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: description integer, private :: exponents_ (num_fundamental) = dimensionless Store the exponents for fundamental units integer, private :: system = dimensionless Default to SI units Type-Bound Procedures procedure, public :: add interface private impure elemental module function add(lhs, rhs) result(total) Implementation → result is the units of the sum of two dimensional quantities; includes operand consistency check Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units ) procedure, public :: assign_units interface private pure module subroutine assign_units(lhs, rhs) Implementation → copy units information Arguments Type Intent Optional Attributes Name class( units ), intent(inout) :: lhs class( units ), intent(in) :: rhs generic, public :: assignment(=) => assign_units private  interface assign_units () Arguments None procedure, public :: divide interface private elemental module function divide(numerator, denominator) result(ratio) Implementation → result is the units of the ratio of two dimensional quantities; includes units-sysetm consistency check Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: numerator class( units ), intent(in) :: denominator Return Value type( units ) procedure, public :: get_system interface private impure elemental module function get_system(this) result(system_of_units) Implementation → result is enumerated value designating units system Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value integer procedure, public :: get_units interface private module function get_units(this) result(exponents) Implementation → result holds the exponents of each unit in the argument (most useful when the actual argument is an expression) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value integer, (num_fundamental) procedure, public :: has_density_units interface private elemental module function has_density_units(this) result(density_units) Implementation → Return true if units match kilograms (kg/m&#94;3) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical procedure, public :: has_energy_units interface private elemental module function has_energy_units(this) result(energy_units) Implementation → Return true if units match joules (J) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical procedure, public :: has_length_units interface private elemental module function has_length_units(this) result(length_units) Implementation → Return true if units match meters (m) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical procedure, public :: has_mass_units interface private elemental module function has_mass_units(this) result(mass_units) Implementation → Return true if units match kilograms (kg) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical procedure, public :: has_power_units interface private elemental module function has_power_units(this) result(power_units) Implementation → Return true if units match Watts (W) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical procedure, public :: has_specific_energy_units interface private elemental module function has_specific_energy_units(this) result(specific_energy_units) Implementation → Return true if units match Joules per kilogram (J/kg) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical procedure, public :: has_stress_units interface private elemental module function has_stress_units(this) result(stress_units) Implementation → Return true if units match Newtons per square meter (N/m&#94;2) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical procedure, public :: has_temperature_units interface private elemental module function has_temperature_units(this) result(temperature_units) Implementation → Return true if units match degrees Kelvin (K) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical procedure, public :: has_time_units interface private elemental module function has_time_units(this) result(time_units) Implementation → Return true if units match seconds (s) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical procedure, public :: has_velocity_units interface private elemental module function has_velocity_units(this) result(velocity_units) Implementation → Return true if units match meters/second&#94;2 (m/s&#94;2) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical procedure, public :: integer_power interface private impure elemental module function integer_power(this, exponent_) result(this_raised) Implementation → result has units of the opearand raised to the power \"exponent_\" Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this integer, intent(in) :: exponent_ Return Value type( units ) procedure, public :: is_dimensionless interface private elemental module function is_dimensionless(this) result(nondimensional) Implementation → Return true if all units exponents are zero; false otherwise. Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical procedure, public :: multiply interface private elemental module function multiply(lhs, rhs) result(product_) Implementation → result is the units of the product of two dimensional quantities; includes units-system consistency check Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units ) procedure, public :: negate interface private elemental module function negate(this) result(negative_this) Implementation → result is the units of the negative of a dimensional quantities Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value type( units ) generic, public :: operator(*) => multiply private  interface multiply () Arguments None generic, public :: operator(**) => integer_power , real_power private  interface integer_power () Arguments None private  interface real_power () Arguments None generic, public :: operator(+) => add private  interface add () Arguments None generic, public :: operator(-) => subtract , negate private  interface subtract () Arguments None private  interface negate () Arguments None generic, public :: operator(/) => divide private  interface divide () Arguments None procedure, public :: real_power interface private impure elemental module function real_power(this, exponent_) result(this_raised) Implementation → result is the units of the operand raised to the power \"exponent_\"; includes check that operand is dimensionless Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this real, intent(in) :: exponent_ Return Value type( units ) procedure, public :: set_units interface private pure module subroutine set_units(this, exponents, system) Implementation → define units Arguments Type Intent Optional Attributes Name class( units ), intent(inout) :: this integer, intent(in) :: exponents (num_fundamental) integer, intent(in) :: system procedure, public :: subtract interface private impure elemental module function subtract(lhs, rhs) result(difference) Implementation → result is the units of the difference of two dimensional quantities; includes operand consistency check Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units )","tags":"","loc":"type/units.html"},{"title":"string_t –  ","text":"type, public, extends(characterizable_t) :: string_t Inherits type~~string_t~~InheritsGraph type~string_t string_t characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Inherited by type~~string_t~~InheritedByGraph type~string_t string_t type~file_t file_t type~file_t->type~string_t lines_ type~test_description_t test_description_t type~test_description_t->type~string_t description_ type~test_result_t test_result_t type~test_result_t->type~string_t description_ type~vector_test_description_t vector_test_description_t type~vector_test_description_t->type~string_t description_vector_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: string_ Constructor public        interface string_t private elemental module function construct(string) result(new_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) private elemental module function from_default_integer(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) private elemental module function from_real(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) Type-Bound Procedures procedure, public :: as_character interface private pure module function as_character(self) result(raw_string) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable generic, public :: assignment(= ) => assign_string_t_to_character , assign_character_to_string_t private  interface assign_string_t_to_character () Arguments None private  interface assign_character_to_string_t () Arguments None procedure, public :: base_name interface private pure module function base_name(self) result(base) Implementation → result contains all characters in file_name before the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) procedure, public :: file_extension interface private elemental module function file_extension(self) result(extension) Implementation → result contains all characters in file_name after the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) procedure, public :: get_json_key interface private elemental module function get_json_key(self) result(unquoted_key) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) generic, public :: get_json_value => get_json_integer_array , get_json_logical , get_json_integer , get_json_string , get_json_real , get_json_real_array private  interface get_json_integer_array () Arguments None private  interface get_json_logical () Arguments None private  interface get_json_integer () Arguments None private  interface get_json_string () Arguments None private  interface get_json_real () Arguments None private  interface get_json_real_array () Arguments None procedure, public :: is_allocated interface private elemental module function is_allocated(self) result(string_allocated) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical generic, public :: operator(//) => string_t_cat_string_t , string_t_cat_character , character_cat_string_t private  interface string_t_cat_string_t () Arguments None private  interface string_t_cat_character () Arguments None private  interface character_cat_string_t () Arguments None generic, public :: operator(/=) => string_t_ne_string_t , string_t_ne_character , character_ne_string_t private  interface string_t_ne_string_t () Arguments None private  interface string_t_ne_character () Arguments None private  interface character_ne_string_t () Arguments None generic, public :: operator(==) => string_t_eq_string_t , string_t_eq_character , character_eq_string_t private  interface string_t_eq_string_t () Arguments None private  interface string_t_eq_character () Arguments None private  interface character_eq_string_t () Arguments None generic, public :: string => as_character private  interface as_character () Arguments None procedure, private :: assign_character_to_string_t interface private pure module subroutine assign_character_to_string_t(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs procedure, private, pass(rhs) :: assign_string_t_to_character interface private pure module subroutine assign_string_t_to_character(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs procedure, private, pass(rhs) :: character_cat_string_t interface private pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) procedure, private, pass(rhs) :: character_eq_string_t interface private elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical procedure, private, pass(rhs) :: character_ne_string_t interface private elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical procedure, private :: get_json_integer interface private pure module function get_json_integer(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer procedure, private :: get_json_integer_array interface private pure module function get_json_integer_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) procedure, private :: get_json_logical interface private elemental module function get_json_logical(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical procedure, private :: get_json_real interface private pure module function get_json_real(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real procedure, private :: get_json_real_array interface private pure module function get_json_real_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) procedure, private :: get_json_string interface private elemental module function get_json_string(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) procedure, private :: string_t_cat_character interface private pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t ) procedure, private :: string_t_cat_string_t interface private pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) procedure, private :: string_t_eq_character interface private elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical procedure, private :: string_t_eq_string_t interface private elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical procedure, private :: string_t_ne_character interface private elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical procedure, private :: string_t_ne_string_t interface private elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"type/string_t.html"},{"title":"vector_function_strategy_t –  ","text":"type, public, abstract :: vector_function_strategy_t Inherited by type~~vector_function_strategy_t~~InheritedByGraph type~vector_function_strategy_t vector_function_strategy_t type~vector_test_description_t vector_test_description_t type~vector_test_description_t->type~vector_function_strategy_t vector_function_strategy_ Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Type-Bound Procedures procedure( vector_function_i ), public, deferred, nopass :: vector_function function vector_function_i() result(passes) Prototype Arguments None Return Value logical, allocatable, (:)","tags":"","loc":"type/vector_function_strategy_t.html"},{"title":"vector_test_description_t –  ","text":"type, public :: vector_test_description_t Encapsulate test descriptions and vector-valued test functions Inherits type~~vector_test_description_t~~InheritsGraph type~vector_test_description_t vector_test_description_t type~string_t string_t type~vector_test_description_t->type~string_t description_vector_ type~vector_function_strategy_t vector_function_strategy_t type~vector_test_description_t->type~vector_function_strategy_t vector_function_strategy_ characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: description_vector_ (:) class( vector_function_strategy_t ), private, allocatable :: vector_function_strategy_ Constructor public        interface vector_test_description_t private module function construct(description_vector, vector_function_strategy) result(vector_test_description) Implementation → The result is a vector_test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description_vector (:) class( vector_function_strategy_t ), intent(in) :: vector_function_strategy Return Value type( vector_test_description_t ) Type-Bound Procedures procedure, public :: contains_text interface private module function contains_text(self, substring) result(match_vector) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical, allocatable, (:) procedure, public :: run interface private impure module function run(self) result(test_results) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ), allocatable, (:)","tags":"","loc":"type/vector_test_description_t.html"},{"title":"test_description_t –  ","text":"type, public :: test_description_t Encapsulate test descriptions and test-functions Inherits type~~test_description_t~~InheritsGraph type~test_description_t test_description_t type~string_t string_t type~test_description_t->type~string_t description_ characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), private :: description_ procedure( test_function_i ), private, pointer, nopass :: test_function_ => null() Constructor public        interface test_description_t private module function construct_from_character(description, test_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) private module function construct_from_string_t(description, test_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) Type-Bound Procedures procedure, public :: contains_text interface private impure elemental module function contains_text(self, substring) result(match) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical generic, public :: operator(==) => equals private  interface equals () Arguments None procedure, public :: run interface private impure elemental module function run(self) result(test_result) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) procedure, private :: equals interface private elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Implementation → The result is .true. if the components of the lhs & rhs are equal Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"type/test_description_t.html"},{"title":"file_t –  ","text":"type, public :: file_t Inherits type~~file_t~~InheritsGraph type~file_t file_t type~string_t string_t type~file_t->type~string_t lines_ characterizable_t characterizable_t type~string_t->characterizable_t Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: lines_ (:) Constructor public        interface file_t private pure module function construct(lines) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) private module function read_lines(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) Type-Bound Procedures procedure, public :: lines interface private pure module function lines(self) result(my_lines) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) procedure, public :: write_lines interface private impure elemental module subroutine write_lines(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in), optional :: file_name","tags":"","loc":"type/file_t.html"},{"title":"results_interface – ","text":"interface private  function results_interface() result(test_results) Arguments None Return Value type( test_result_t ),allocatable,(:) Description The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure","tags":"","loc":"interface/results_interface.html"},{"title":"subject_interface – ","text":"interface private pure function subject_interface() result(specimen) Arguments None Return Value character(len=:),allocatable Description The result is the name of the test specimen (the subject of testing)","tags":"","loc":"interface/subject_interface.html"},{"title":"norm_interface – ","text":"interface private pure function norm_interface(self) result(norm_of_self) Arguments Type Intent Optional Attributes Name class( oracle_t ), intent(in) :: self Return Value real Description result is a norm of the array formed by concatenating the real components of self object","tags":"","loc":"interface/norm_interface.html"},{"title":"subtract_interface – ","text":"interface private  function subtract_interface(self, rhs) result(difference) Arguments Type Intent Optional Attributes Name class( oracle_t ), intent(in) :: self class( oracle_t ), intent(in) :: rhs Return Value class( oracle_t ),allocatable Description result has components corresponding to subtracting rhs's components fron self object's components","tags":"","loc":"interface/subtract_interface.html"},{"title":"write_interface – ","text":"interface private  subroutine write_interface(self, unit, iotype, v_list, iostat, iomsg) Arguments Type Intent Optional Attributes Name class( object_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg","tags":"","loc":"interface/write_interface.html"},{"title":"vector_function_i – ","text":"interface private  function vector_function_i() result(passes) Arguments None Return Value logical,allocatable,(:)","tags":"","loc":"interface/vector_function_i.html"},{"title":"test_function_i – ","text":"interface public  function test_function_i() result(passes) Arguments None Return Value logical","tags":"","loc":"interface/test_function_i.html"},{"title":"separated_values – ","text":"interface public pure module function separated_values(separator, mold) result(format_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:),allocatable","tags":"","loc":"interface/separated_values.html"},{"title":"test_result_t – ","text":"public interface test_result_t Functions private elemental module function construct_from_character(description, passed) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) private elemental module function construct_from_string(description, passed) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t )","tags":"","loc":"interface/test_result_t.html"},{"title":"characterize – ","text":"interface private pure module function characterize(self) result(characterization) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:),allocatable Description The result is a character description of the test and its outcome","tags":"","loc":"interface/characterize.html"},{"title":"description_contains – ","text":"interface private elemental module function description_contains(self, substring) result(substring_found) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Description The result is true if and only if the test description contains the substring","tags":"","loc":"interface/description_contains.html"},{"title":"passed – ","text":"interface private impure elemental module function passed(self) result(test_passed) Implementation → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Description The result is true if and only if the test passed on all images","tags":"","loc":"interface/passed.html"},{"title":"mark_as_defined – ","text":"interface private pure module subroutine mark_as_defined(self) Implementation → Arguments Type Intent Optional Attributes Name class( co_object ), intent(inout) :: self Description Mark the co_object as user-defined","tags":"","loc":"interface/mark_as_defined.html"},{"title":"user_defined – ","text":"interface private pure module function user_defined(self) result(is_defined) Implementation → Arguments Type Intent Optional Attributes Name class( co_object ), intent(in) :: self Return Value logical Description Return a boolean result indicating whether self co_object has been initialized since its declaration","tags":"","loc":"interface/user_defined.html"},{"title":"report – ","text":"interface private module subroutine report(test, passes, tests) Implementation → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests Description Print the test results and increment the tallies of passing tests and total tests","tags":"","loc":"interface/report.html"},{"title":"bin_t – ","text":"public interface bin_t Functions private elemental module function construct(num_items, num_bins, bin_number) result(bin) Implementation → the result is a bin associated with a range of item numbers Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t )","tags":"","loc":"interface/bin_t.html"},{"title":"first – ","text":"interface Called by interface~~first~~CalledByGraph interface~first bin_t%first proc~first first proc~first->interface~first Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function first(self) result(first_item_number) Implementation → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer Description the result is the first item number associated with the given bin","tags":"","loc":"interface/first.html"},{"title":"last – ","text":"interface Called by interface~~last~~CalledByGraph interface~last bin_t%last proc~last last proc~last->interface~last Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function last(self) result(last_item_number) Implementation → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer Description the result is the last item number associated with the given bin","tags":"","loc":"interface/last.html"},{"title":"within_tolerance – ","text":"interface private module function within_tolerance(self, reference, tolerance) result(in_tolerance) Implementation → Arguments Type Intent Optional Attributes Name class( oracle_t ), intent(in) :: self class( oracle_t ), intent(in) :: reference real, intent(in) :: tolerance Return Value logical Description template method with true result iff the difference in state vectors (self - reference) has a norm within tolerance\n(impure because of internal call to 'subtract' binding)\nThe existence of self procedure eliminates the need to rewrite similar code for every oracle child type.","tags":"","loc":"interface/within_tolerance.html"},{"title":"operator(.catColumns.) – ","text":"public interface operator(.catColumns.) Calls interface~~operator(.catcolumns.)~~CallsGraph interface~operator(.catcolumns.) operator(.catColumns.) interface~concatenate_columns concatenate_columns interface~operator(.catcolumns.)->interface~concatenate_columns Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  interface concatenate_columns () Arguments None","tags":"","loc":"interface/operator(.catcolumns.).html"},{"title":"operator(.catRows.) – ","text":"public interface operator(.catRows.) Calls interface~~operator(.catrows.)~~CallsGraph interface~operator(.catrows.) operator(.catRows.) interface~concatenate_rows concatenate_rows interface~operator(.catrows.)->interface~concatenate_rows Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  interface concatenate_rows () Arguments None","tags":"","loc":"interface/operator(.catrows.).html"},{"title":"operator(.columnVectors.) – ","text":"public interface operator(.columnVectors.) Calls interface~~operator(.columnvectors.)~~CallsGraph interface~operator(.columnvectors.) operator(.columnVectors.) interface~column_vectors column_vectors interface~operator(.columnvectors.)->interface~column_vectors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures private  interface column_vectors () Arguments None","tags":"","loc":"interface/operator(.columnvectors.).html"},{"title":"column_vectors – ","text":"interface Called by interface~~column_vectors~~CalledByGraph interface~column_vectors column_vectors interface~operator(.columnvectors.) operator(.columnVectors.) interface~operator(.columnvectors.)->interface~column_vectors Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function column_vectors(vector_field) result(array_of_3D_column_vectors) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:,:,:,:) :: vector_field Return Value real,dimension(:,:),allocatable Description Result is array of 3D column vectors of dimension (space_dim,nx ny nz) reshaped from vector-field argument\nof dimension (nx,ny,nz,space_dim)","tags":"","loc":"interface/column_vectors.html"},{"title":"concatenate_columns – ","text":"interface Called by interface~~concatenate_columns~~CalledByGraph interface~concatenate_columns concatenate_columns interface~operator(.catcolumns.) operator(.catColumns.) interface~operator(.catcolumns.)->interface~concatenate_columns proc~concatenate_rows concatenate_rows proc~concatenate_rows->interface~concatenate_columns Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function concatenate_columns(a, b) result(concatenated) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:,:) :: a real, intent(in), dimension(:,:) :: b Return Value real,dimension(:,:),allocatable Description Result contains the concatenation of the columns of argument a with the columns of argument b","tags":"","loc":"interface/concatenate_columns.html"},{"title":"concatenate_rows – ","text":"interface Called by interface~~concatenate_rows~~CalledByGraph interface~concatenate_rows concatenate_rows interface~operator(.catrows.) operator(.catRows.) interface~operator(.catrows.)->interface~concatenate_rows Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function concatenate_rows(a, b) result(concatenated) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:,:) :: a real, intent(in), dimension(:,:) :: b Return Value real,dimension(:,:),allocatable Description Result contains the concatenation of the rows of argument a with the rows of argument b","tags":"","loc":"interface/concatenate_rows.html"},{"title":"data_partition_t – ","text":"public interface data_partition_t Functions private pure module function construct(cardinality) result(data_partition) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: cardinality Return Value type( data_partition_t )","tags":"","loc":"interface/data_partition_t.html"},{"title":"define_partitions – ","text":"interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. Called by interface~~define_partitions~~CalledByGraph interface~define_partitions data_partition_t%define_partitions proc~construct construct proc~construct->interface~define_partitions Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module subroutine define_partitions(self, cardinality) Implementation → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(inout) :: self integer, intent(in) :: cardinality Description define the range of data identification numbers owned by the executing image","tags":"","loc":"interface/define_partitions.html"},{"title":"first – ","text":"interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. Called by interface~~first~2~~CalledByGraph interface~first~2 data_partition_t%first proc~gather_real32_1d_array gather_real32_1D_array proc~gather_real32_1d_array->interface~first~2 proc~gather_real32_2d_array gather_real32_2D_array proc~gather_real32_2d_array->interface~first~2 proc~gather_real64_1d_array gather_real64_1D_array proc~gather_real64_1d_array->interface~first~2 proc~gather_real64_2d_array gather_real64_2D_array proc~gather_real64_2d_array->interface~first~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function first(self, image_number) result(first_index) Implementation → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self integer, intent(in), optional :: image_number Return Value integer Description the result is the first identification number owned by the executing image","tags":"","loc":"interface/first~2.html"},{"title":"gather_real32_1D_array – ","text":"interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private module subroutine gather_real32_1D_array(self, a, result_image, dim) Implementation → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real32), intent(inout) :: a (:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim Description Gather the elements of an 1D array distributed along dimension dim onto result_image","tags":"","loc":"interface/gather_real32_1d_array.html"},{"title":"gather_real32_2D_array – ","text":"interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private module subroutine gather_real32_2D_array(self, a, result_image, dim) Implementation → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real32), intent(inout) :: a (:,:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim Description Gather the elements of an 2D array distributed along dimension dim onto result_image","tags":"","loc":"interface/gather_real32_2d_array.html"},{"title":"gather_real64_1D_array – ","text":"interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private module subroutine gather_real64_1D_array(self, a, result_image, dim) Implementation → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real64), intent(inout) :: a (:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim Description Gather the elements of an 1D array distributed along dimension dim onto result_image","tags":"","loc":"interface/gather_real64_1d_array.html"},{"title":"gather_real64_2D_array – ","text":"interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private module subroutine gather_real64_2D_array(self, a, result_image, dim) Implementation → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real64), intent(inout) :: a (:,:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim Description Gather the elements of an 2D array distributed along dimension dim onto result_image","tags":"","loc":"interface/gather_real64_2d_array.html"},{"title":"last – ","text":"interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. Called by interface~~last~2~~CalledByGraph interface~last~2 data_partition_t%last proc~gather_real32_1d_array gather_real32_1D_array proc~gather_real32_1d_array->interface~last~2 proc~gather_real32_2d_array gather_real32_2D_array proc~gather_real32_2d_array->interface~last~2 proc~gather_real64_1d_array gather_real64_1D_array proc~gather_real64_1d_array->interface~last~2 proc~gather_real64_2d_array gather_real64_2D_array proc~gather_real64_2d_array->interface~last~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function last(self, image_number) result(last_index) Implementation → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self integer, intent(in), optional :: image_number Return Value integer Description the result is the last identification number owned by the executing image","tags":"","loc":"interface/last~2.html"},{"title":"mark_as_defined – ","text":"interface private pure module subroutine mark_as_defined(self) Implementation → Arguments Type Intent Optional Attributes Name class( object_t ), intent(inout) :: self Description Mark the object as user-defined","tags":"","loc":"interface/mark_as_defined~2.html"},{"title":"user_defined – ","text":"interface private pure module function user_defined(self) result(is_defined) Implementation → Arguments Type Intent Optional Attributes Name class( object_t ), intent(in) :: self Return Value logical Description Return a boolean result indicating whether self object has been initialized since its declaration","tags":"","loc":"interface/user_defined~2.html"},{"title":"argument_present – ","text":"interface private module function argument_present(acceptable_argument) result(found) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical Description result is .true. only if a command-line argument matches an element of this function's argument","tags":"","loc":"interface/argument_present.html"},{"title":"flag_value – ","text":"interface private module function flag_value(flag) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:),allocatable Description result is the value passed adjacent to a command-line flag","tags":"","loc":"interface/flag_value.html"},{"title":"co_all – ","text":"interface Called by interface~~co_all~~CalledByGraph interface~co_all co_all proc~passed passed proc~passed->interface~co_all proc~report report proc~report->interface~co_all Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. public impure elemental module subroutine co_all(boolean) Implementation → Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean Description If any image in a team calls this subroutine, then every image in the \nthe same team must call this subroutine.  This subroutine sets the\n\"boolean\" argument .true. if it is true in all participating images\nupon entry and .false. otherwise.","tags":"","loc":"interface/co_all.html"},{"title":"add – ","text":"interface private impure elemental module function add(lhs, rhs) result(total) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units ) Description result is the units of the sum of two dimensional quantities; includes operand consistency check","tags":"","loc":"interface/add.html"},{"title":"assign_units – ","text":"interface private pure module subroutine assign_units(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(inout) :: lhs class( units ), intent(in) :: rhs Description copy units information","tags":"","loc":"interface/assign_units.html"},{"title":"divide – ","text":"interface private elemental module function divide(numerator, denominator) result(ratio) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: numerator class( units ), intent(in) :: denominator Return Value type( units ) Description result is the units of the ratio of two dimensional quantities; includes units-sysetm consistency check","tags":"","loc":"interface/divide.html"},{"title":"get_system – ","text":"interface private impure elemental module function get_system(this) result(system_of_units) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value integer Description result is enumerated value designating units system","tags":"","loc":"interface/get_system.html"},{"title":"get_units – ","text":"interface private module function get_units(this) result(exponents) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value integer(num_fundamental) Description result holds the exponents of each unit in the argument (most useful when the actual argument is an expression)","tags":"","loc":"interface/get_units.html"},{"title":"has_density_units – ","text":"interface private elemental module function has_density_units(this) result(density_units) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical Description Return true if units match kilograms (kg/m&#94;3)","tags":"","loc":"interface/has_density_units.html"},{"title":"has_energy_units – ","text":"interface private elemental module function has_energy_units(this) result(energy_units) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical Description Return true if units match joules (J)","tags":"","loc":"interface/has_energy_units.html"},{"title":"has_length_units – ","text":"interface private elemental module function has_length_units(this) result(length_units) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical Description Return true if units match meters (m)","tags":"","loc":"interface/has_length_units.html"},{"title":"has_mass_units – ","text":"interface private elemental module function has_mass_units(this) result(mass_units) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical Description Return true if units match kilograms (kg)","tags":"","loc":"interface/has_mass_units.html"},{"title":"has_power_units – ","text":"interface private elemental module function has_power_units(this) result(power_units) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical Description Return true if units match Watts (W)","tags":"","loc":"interface/has_power_units.html"},{"title":"has_specific_energy_units – ","text":"interface private elemental module function has_specific_energy_units(this) result(specific_energy_units) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical Description Return true if units match Joules per kilogram (J/kg)","tags":"","loc":"interface/has_specific_energy_units.html"},{"title":"has_stress_units – ","text":"interface private elemental module function has_stress_units(this) result(stress_units) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical Description Return true if units match Newtons per square meter (N/m&#94;2)","tags":"","loc":"interface/has_stress_units.html"},{"title":"has_temperature_units – ","text":"interface private elemental module function has_temperature_units(this) result(temperature_units) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical Description Return true if units match degrees Kelvin (K)","tags":"","loc":"interface/has_temperature_units.html"},{"title":"has_time_units – ","text":"interface private elemental module function has_time_units(this) result(time_units) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical Description Return true if units match seconds (s)","tags":"","loc":"interface/has_time_units.html"},{"title":"has_velocity_units – ","text":"interface private elemental module function has_velocity_units(this) result(velocity_units) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical Description Return true if units match meters/second&#94;2 (m/s&#94;2)","tags":"","loc":"interface/has_velocity_units.html"},{"title":"integer_power – ","text":"interface private impure elemental module function integer_power(this, exponent_) result(this_raised) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this integer, intent(in) :: exponent_ Return Value type( units ) Description result has units of the opearand raised to the power \"exponent_\"","tags":"","loc":"interface/integer_power.html"},{"title":"is_dimensionless – ","text":"interface Called by interface~~is_dimensionless~~CalledByGraph interface~is_dimensionless units%is_dimensionless proc~real_power real_power proc~real_power->interface~is_dimensionless Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function is_dimensionless(this) result(nondimensional) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical Description Return true if all units exponents are zero; false otherwise.","tags":"","loc":"interface/is_dimensionless.html"},{"title":"multiply – ","text":"interface private elemental module function multiply(lhs, rhs) result(product_) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units ) Description result is the units of the product of two dimensional quantities; includes units-system consistency check","tags":"","loc":"interface/multiply.html"},{"title":"negate – ","text":"interface private elemental module function negate(this) result(negative_this) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value type( units ) Description result is the units of the negative of a dimensional quantities","tags":"","loc":"interface/negate.html"},{"title":"real_power – ","text":"interface private impure elemental module function real_power(this, exponent_) result(this_raised) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this real, intent(in) :: exponent_ Return Value type( units ) Description result is the units of the operand raised to the power \"exponent_\"; includes check that operand is dimensionless","tags":"","loc":"interface/real_power.html"},{"title":"set_units – ","text":"interface private pure module subroutine set_units(this, exponents, system) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(inout) :: this integer, intent(in) :: exponents (num_fundamental) integer, intent(in) :: system Description define units","tags":"","loc":"interface/set_units.html"},{"title":"subtract – ","text":"interface private impure elemental module function subtract(lhs, rhs) result(difference) Implementation → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units ) Description result is the units of the difference of two dimensional quantities; includes operand consistency check","tags":"","loc":"interface/subtract.html"},{"title":"array_of_strings – ","text":"interface public pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ),allocatable,(:)","tags":"","loc":"interface/array_of_strings.html"},{"title":"operator(.cat.) – ","text":"public interface operator(.cat.) Functions private pure module function concatenate_elements(strings) result(concatenated_strings) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t )","tags":"","loc":"interface/operator(.cat.).html"},{"title":"string_t – ","text":"public interface string_t Functions private elemental module function construct(string) result(new_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) private elemental module function from_default_integer(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) private elemental module function from_real(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t )","tags":"","loc":"interface/string_t.html"},{"title":"as_character – ","text":"interface Called by interface~~as_character~~CalledByGraph interface~as_character string_t%as_character none~string string_t%string none~string->interface~as_character proc~assign_string_t_to_character assign_string_t_to_character proc~assign_string_t_to_character->none~string proc~base_name base_name proc~base_name->none~string proc~character_eq_string_t character_eq_string_t proc~character_eq_string_t->none~string proc~character_ne_string_t character_ne_string_t proc~character_ne_string_t->none~string proc~characterize characterize proc~characterize->none~string proc~concatenate_elements concatenate_elements proc~concatenate_elements->none~string proc~contains_text contains_text proc~contains_text->none~string proc~contains_text~2 contains_text proc~contains_text~2->none~string proc~description_contains description_contains proc~description_contains->none~string proc~file_extension file_extension proc~file_extension->none~string proc~get_json_integer get_json_integer proc~get_json_integer->none~string proc~get_json_key get_json_key proc~get_json_key->none~string proc~get_json_logical get_json_logical proc~get_json_logical->none~string proc~get_json_real get_json_real proc~get_json_real->none~string proc~get_json_real_array get_json_real_array proc~get_json_real_array->none~string proc~get_json_string get_json_string proc~get_json_string->none~string proc~read_lines read_lines proc~read_lines->none~string proc~string_t_eq_character string_t_eq_character proc~string_t_eq_character->none~string proc~string_t_eq_string_t string_t_eq_string_t proc~string_t_eq_string_t->none~string proc~string_t_ne_character string_t_ne_character proc~string_t_ne_character->none~string proc~string_t_ne_string_t string_t_ne_string_t proc~string_t_ne_string_t->none~string proc~write_lines write_lines proc~write_lines->none~string Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function as_character(self) result(raw_string) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:),allocatable","tags":"","loc":"interface/as_character.html"},{"title":"assign_character_to_string_t – ","text":"interface private pure module subroutine assign_character_to_string_t(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs","tags":"","loc":"interface/assign_character_to_string_t.html"},{"title":"assign_string_t_to_character – ","text":"interface private pure module subroutine assign_string_t_to_character(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs","tags":"","loc":"interface/assign_string_t_to_character.html"},{"title":"base_name – ","text":"interface private pure module function base_name(self) result(base) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Description result contains all characters in file_name before the last dot (.)","tags":"","loc":"interface/base_name.html"},{"title":"character_cat_string_t – ","text":"interface private pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","loc":"interface/character_cat_string_t.html"},{"title":"character_eq_string_t – ","text":"interface private elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"interface/character_eq_string_t.html"},{"title":"character_ne_string_t – ","text":"interface private elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"interface/character_ne_string_t.html"},{"title":"file_extension – ","text":"interface private elemental module function file_extension(self) result(extension) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Description result contains all characters in file_name after the last dot (.)","tags":"","loc":"interface/file_extension.html"},{"title":"get_json_integer – ","text":"interface private pure module function get_json_integer(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer","tags":"","loc":"interface/get_json_integer.html"},{"title":"get_json_integer_array – ","text":"interface private pure module function get_json_integer_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer,allocatable,(:)","tags":"","loc":"interface/get_json_integer_array.html"},{"title":"get_json_key – ","text":"interface Called by interface~~get_json_key~~CalledByGraph interface~get_json_key string_t%get_json_key proc~get_json_integer get_json_integer proc~get_json_integer->interface~get_json_key proc~get_json_logical get_json_logical proc~get_json_logical->interface~get_json_key proc~get_json_real get_json_real proc~get_json_real->interface~get_json_key proc~get_json_real_array get_json_real_array proc~get_json_real_array->interface~get_json_key proc~get_json_string get_json_string proc~get_json_string->interface~get_json_key Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private elemental module function get_json_key(self) result(unquoted_key) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t )","tags":"","loc":"interface/get_json_key.html"},{"title":"get_json_logical – ","text":"interface private elemental module function get_json_logical(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical","tags":"","loc":"interface/get_json_logical.html"},{"title":"get_json_real – ","text":"interface private pure module function get_json_real(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real","tags":"","loc":"interface/get_json_real.html"},{"title":"get_json_real_array – ","text":"interface Called by interface~~get_json_real_array~~CalledByGraph interface~get_json_real_array string_t%get_json_real_array proc~get_json_integer_array get_json_integer_array proc~get_json_integer_array->interface~get_json_real_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. private pure module function get_json_real_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real,allocatable,(:)","tags":"","loc":"interface/get_json_real_array.html"},{"title":"get_json_string – ","text":"interface private elemental module function get_json_string(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t )","tags":"","loc":"interface/get_json_string.html"},{"title":"is_allocated – ","text":"interface private elemental module function is_allocated(self) result(string_allocated) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical","tags":"","loc":"interface/is_allocated.html"},{"title":"string_t_cat_character – ","text":"interface private pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t )","tags":"","loc":"interface/string_t_cat_character.html"},{"title":"string_t_cat_string_t – ","text":"interface private pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","loc":"interface/string_t_cat_string_t.html"},{"title":"string_t_eq_character – ","text":"interface private elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical","tags":"","loc":"interface/string_t_eq_character.html"},{"title":"string_t_eq_string_t – ","text":"interface private elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"interface/string_t_eq_string_t.html"},{"title":"string_t_ne_character – ","text":"interface private elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical","tags":"","loc":"interface/string_t_ne_character.html"},{"title":"string_t_ne_string_t – ","text":"interface private elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"interface/string_t_ne_string_t.html"},{"title":"vector_test_description_t – ","text":"public interface vector_test_description_t Functions private module function construct(description_vector, vector_function_strategy) result(vector_test_description) Implementation → The result is a vector_test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description_vector (:) class( vector_function_strategy_t ), intent(in) :: vector_function_strategy Return Value type( vector_test_description_t )","tags":"","loc":"interface/vector_test_description_t.html"},{"title":"contains_text – ","text":"interface private module function contains_text(self, substring) result(match_vector) Implementation → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical,allocatable,(:) Description The result is .true. if the test description includes the value of substring","tags":"","loc":"interface/contains_text.html"},{"title":"run – ","text":"interface private impure module function run(self) result(test_results) Implementation → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ),allocatable,(:) Description The result encapsulates the test description and test outcome","tags":"","loc":"interface/run.html"},{"title":"test_description_t – ","text":"public interface test_description_t Functions private module function construct_from_character(description, test_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) private module function construct_from_string_t(description, test_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t )","tags":"","loc":"interface/test_description_t.html"},{"title":"contains_text – ","text":"interface private impure elemental module function contains_text(self, substring) result(match) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Description The result is .true. if the test description includes the value of substring","tags":"","loc":"interface/contains_text~2.html"},{"title":"equals – ","text":"interface private elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical Description The result is .true. if the components of the lhs & rhs are equal","tags":"","loc":"interface/equals.html"},{"title":"run – ","text":"interface private impure elemental module function run(self) result(test_result) Implementation → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) Description The result encapsulates the test description and test outcome","tags":"","loc":"interface/run~2.html"},{"title":"file_t – ","text":"public interface file_t Functions private pure module function construct(lines) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) private module function read_lines(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t )","tags":"","loc":"interface/file_t.html"},{"title":"lines – ","text":"interface private pure module function lines(self) result(my_lines) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ),allocatable,(:)","tags":"","loc":"interface/lines.html"},{"title":"write_lines – ","text":"interface private impure elemental module subroutine write_lines(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in), optional :: file_name","tags":"","loc":"interface/write_lines.html"},{"title":"construct – ","text":"module procedure construct pure module function construct(cardinality) result(data_partition) Arguments Type Intent Optional Attributes Name integer, intent(in) :: cardinality Return Value type( data_partition_t ) Calls proc~~construct~~CallsGraph proc~construct construct interface~define_partitions data_partition_t%define_partitions proc~construct->interface~define_partitions Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/construct.html"},{"title":"define_partitions – ","text":"module procedure define_partitions pure module subroutine define_partitions(self, cardinality) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(inout) :: self integer, intent(in) :: cardinality","tags":"","loc":"proc/define_partitions.html"},{"title":"first – ","text":"module procedure first pure module function first(self, image_number) result(first_index) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self integer, intent(in), optional :: image_number Return Value integer Calls proc~~first~~CallsGraph proc~first first assert assert proc~first->assert interface~first bin_t%first proc~first->interface~first Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/first.html"},{"title":"gather_real32_1D_array – ","text":"module procedure gather_real32_1D_array module subroutine gather_real32_1D_array(self, a, result_image, dim) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real32), intent(inout) :: a (:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim Calls proc~~gather_real32_1d_array~~CallsGraph proc~gather_real32_1d_array gather_real32_1D_array assert assert proc~gather_real32_1d_array->assert interface~first~2 data_partition_t%first proc~gather_real32_1d_array->interface~first~2 interface~last~2 data_partition_t%last proc~gather_real32_1d_array->interface~last~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/gather_real32_1d_array.html"},{"title":"gather_real32_2D_array – ","text":"module procedure gather_real32_2D_array module subroutine gather_real32_2D_array(self, a, result_image, dim) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real32), intent(inout) :: a (:,:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim Calls proc~~gather_real32_2d_array~~CallsGraph proc~gather_real32_2d_array gather_real32_2D_array interface~first~2 data_partition_t%first proc~gather_real32_2d_array->interface~first~2 interface~last~2 data_partition_t%last proc~gather_real32_2d_array->interface~last~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/gather_real32_2d_array.html"},{"title":"gather_real64_1D_array – ","text":"module procedure gather_real64_1D_array module subroutine gather_real64_1D_array(self, a, result_image, dim) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real64), intent(inout) :: a (:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim Calls proc~~gather_real64_1d_array~~CallsGraph proc~gather_real64_1d_array gather_real64_1D_array assert assert proc~gather_real64_1d_array->assert interface~first~2 data_partition_t%first proc~gather_real64_1d_array->interface~first~2 interface~last~2 data_partition_t%last proc~gather_real64_1d_array->interface~last~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/gather_real64_1d_array.html"},{"title":"gather_real64_2D_array – ","text":"module procedure gather_real64_2D_array module subroutine gather_real64_2D_array(self, a, result_image, dim) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real64), intent(inout) :: a (:,:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim Calls proc~~gather_real64_2d_array~~CallsGraph proc~gather_real64_2d_array gather_real64_2D_array interface~first~2 data_partition_t%first proc~gather_real64_2d_array->interface~first~2 interface~last~2 data_partition_t%last proc~gather_real64_2d_array->interface~last~2 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/gather_real64_2d_array.html"},{"title":"last – ","text":"module procedure last pure module function last(self, image_number) result(last_index) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self integer, intent(in), optional :: image_number Return Value integer Calls proc~~last~~CallsGraph proc~last last assert assert proc~last->assert interface~last bin_t%last proc~last->interface~last Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/last.html"},{"title":"within_tolerance – ","text":"module procedure within_tolerance module function within_tolerance(self, reference, tolerance) result(in_tolerance) Interface → Arguments Type Intent Optional Attributes Name class( oracle_t ), intent(in) :: self class( oracle_t ), intent(in) :: reference real, intent(in) :: tolerance Return Value logical Calls proc~~within_tolerance~~CallsGraph proc~within_tolerance within_tolerance norm norm proc~within_tolerance->norm Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/within_tolerance.html"},{"title":"construct – ","text":"module procedure construct pure module function construct(lines) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t )","tags":"","loc":"proc/construct~2.html"},{"title":"lines – ","text":"module procedure lines pure module function lines(self) result(my_lines) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:)","tags":"","loc":"proc/lines.html"},{"title":"read_lines – ","text":"module procedure read_lines module function read_lines(file_name) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) Calls proc~~read_lines~~CallsGraph proc~read_lines read_lines assert assert proc~read_lines->assert none~string string_t%string proc~read_lines->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/read_lines.html"},{"title":"write_lines – ","text":"module procedure write_lines impure elemental module subroutine write_lines(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in), optional :: file_name Calls proc~~write_lines~~CallsGraph proc~write_lines write_lines assert assert proc~write_lines->assert none~string string_t%string proc~write_lines->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/write_lines.html"},{"title":"characterize – ","text":"module procedure characterize pure module function characterize(self) result(characterization) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable Calls proc~~characterize~~CallsGraph proc~characterize characterize none~string string_t%string proc~characterize->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/characterize.html"},{"title":"construct_from_character – ","text":"module procedure construct_from_character elemental module function construct_from_character(description, passed) result(test_result) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t )","tags":"","loc":"proc/construct_from_character.html"},{"title":"construct_from_string – ","text":"module procedure construct_from_string elemental module function construct_from_string(description, passed) result(test_result) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t )","tags":"","loc":"proc/construct_from_string.html"},{"title":"description_contains – ","text":"module procedure description_contains elemental module function description_contains(self, substring) result(substring_found) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Calls proc~~description_contains~~CallsGraph proc~description_contains description_contains none~string string_t%string proc~description_contains->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/description_contains.html"},{"title":"passed – ","text":"module procedure passed impure elemental module function passed(self) result(test_passed) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Calls proc~~passed~~CallsGraph proc~passed passed interface~co_all co_all proc~passed->interface~co_all Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/passed.html"},{"title":"separated_values – ","text":"module procedure separated_values pure module function separated_values(separator, mold) result(format_string) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:), allocatable","tags":"","loc":"proc/separated_values.html"},{"title":"construct – ","text":"module procedure construct elemental module function construct(num_items, num_bins, bin_number) result(bin) Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) Calls proc~~construct~3~~CallsGraph proc~construct~3 construct assert assert proc~construct~3->assert intrinsic_array_t intrinsic_array_t proc~construct~3->intrinsic_array_t Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/construct~3.html"},{"title":"first – ","text":"module procedure first elemental module function first(self) result(first_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","loc":"proc/first~2.html"},{"title":"last – ","text":"module procedure last elemental module function last(self) result(last_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","loc":"proc/last~2.html"},{"title":"report – ","text":"module procedure report module subroutine report(test, passes, tests) Interface → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests Calls proc~~report~~CallsGraph proc~report report characterize characterize proc~report->characterize flag_value flag_value proc~report->flag_value interface~co_all co_all proc~report->interface~co_all passed passed proc~report->passed passing_tests passing_tests proc~report->passing_tests results results proc~report->results subject subject proc~report->subject Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/report.html"},{"title":"array_of_strings – ","text":"module procedure array_of_strings pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ), allocatable, (:)","tags":"","loc":"proc/array_of_strings.html"},{"title":"as_character – ","text":"module procedure as_character pure module function as_character(self) result(raw_string) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable","tags":"","loc":"proc/as_character.html"},{"title":"assign_character_to_string_t – ","text":"module procedure assign_character_to_string_t pure module subroutine assign_character_to_string_t(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs","tags":"","loc":"proc/assign_character_to_string_t.html"},{"title":"assign_string_t_to_character – ","text":"module procedure assign_string_t_to_character pure module subroutine assign_string_t_to_character(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs Calls proc~~assign_string_t_to_character~~CallsGraph proc~assign_string_t_to_character assign_string_t_to_character none~string string_t%string proc~assign_string_t_to_character->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/assign_string_t_to_character.html"},{"title":"base_name – ","text":"module procedure base_name pure module function base_name(self) result(base) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~base_name~~CallsGraph proc~base_name base_name none~string string_t%string proc~base_name->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/base_name.html"},{"title":"character_cat_string_t – ","text":"module procedure character_cat_string_t pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","loc":"proc/character_cat_string_t.html"},{"title":"character_eq_string_t – ","text":"module procedure character_eq_string_t elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~character_eq_string_t~~CallsGraph proc~character_eq_string_t character_eq_string_t none~string string_t%string proc~character_eq_string_t->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/character_eq_string_t.html"},{"title":"character_ne_string_t – ","text":"module procedure character_ne_string_t elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~character_ne_string_t~~CallsGraph proc~character_ne_string_t character_ne_string_t none~string string_t%string proc~character_ne_string_t->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/character_ne_string_t.html"},{"title":"concatenate_elements – ","text":"module procedure concatenate_elements pure module function concatenate_elements(strings) result(concatenated_strings) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) Calls proc~~concatenate_elements~~CallsGraph proc~concatenate_elements concatenate_elements none~string string_t%string proc~concatenate_elements->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/concatenate_elements.html"},{"title":"construct – ","text":"module procedure construct elemental module function construct(string) result(new_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t )","tags":"","loc":"proc/construct~4.html"},{"title":"file_extension – ","text":"module procedure file_extension elemental module function file_extension(self) result(extension) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~file_extension~~CallsGraph proc~file_extension file_extension none~string string_t%string proc~file_extension->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/file_extension.html"},{"title":"from_default_integer – ","text":"module procedure from_default_integer elemental module function from_default_integer(i) result(string) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t )","tags":"","loc":"proc/from_default_integer.html"},{"title":"from_real – ","text":"module procedure from_real elemental module function from_real(x) result(string) Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t )","tags":"","loc":"proc/from_real.html"},{"title":"get_json_integer – ","text":"module procedure get_json_integer pure module function get_json_integer(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer Calls proc~~get_json_integer~~CallsGraph proc~get_json_integer get_json_integer assert assert proc~get_json_integer->assert interface~get_json_key string_t%get_json_key proc~get_json_integer->interface~get_json_key none~string string_t%string proc~get_json_integer->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_integer.html"},{"title":"get_json_integer_array – ","text":"module procedure get_json_integer_array pure module function get_json_integer_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) Calls proc~~get_json_integer_array~~CallsGraph proc~get_json_integer_array get_json_integer_array interface~get_json_real_array string_t%get_json_real_array proc~get_json_integer_array->interface~get_json_real_array Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_integer_array.html"},{"title":"get_json_key – ","text":"module procedure get_json_key elemental module function get_json_key(self) result(unquoted_key) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) Calls proc~~get_json_key~~CallsGraph proc~get_json_key get_json_key none~string string_t%string proc~get_json_key->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_key.html"},{"title":"get_json_logical – ","text":"module procedure get_json_logical elemental module function get_json_logical(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical Calls proc~~get_json_logical~~CallsGraph proc~get_json_logical get_json_logical assert assert proc~get_json_logical->assert interface~get_json_key string_t%get_json_key proc~get_json_logical->interface~get_json_key none~string string_t%string proc~get_json_logical->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_logical.html"},{"title":"get_json_real – ","text":"module procedure get_json_real pure module function get_json_real(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real Calls proc~~get_json_real~~CallsGraph proc~get_json_real get_json_real assert assert proc~get_json_real->assert interface~get_json_key string_t%get_json_key proc~get_json_real->interface~get_json_key none~string string_t%string proc~get_json_real->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_real.html"},{"title":"get_json_real_array – ","text":"module procedure get_json_real_array pure module function get_json_real_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) Calls proc~~get_json_real_array~~CallsGraph proc~get_json_real_array get_json_real_array assert assert proc~get_json_real_array->assert interface~get_json_key string_t%get_json_key proc~get_json_real_array->interface~get_json_key none~string string_t%string proc~get_json_real_array->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_real_array.html"},{"title":"get_json_string – ","text":"module procedure get_json_string elemental module function get_json_string(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) Calls proc~~get_json_string~~CallsGraph proc~get_json_string get_json_string assert assert proc~get_json_string->assert interface~get_json_key string_t%get_json_key proc~get_json_string->interface~get_json_key none~string string_t%string proc~get_json_string->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/get_json_string.html"},{"title":"is_allocated – ","text":"module procedure is_allocated elemental module function is_allocated(self) result(string_allocated) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical","tags":"","loc":"proc/is_allocated.html"},{"title":"string_t_cat_character – ","text":"module procedure string_t_cat_character pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t )","tags":"","loc":"proc/string_t_cat_character.html"},{"title":"string_t_cat_string_t – ","text":"module procedure string_t_cat_string_t pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t )","tags":"","loc":"proc/string_t_cat_string_t.html"},{"title":"string_t_eq_character – ","text":"module procedure string_t_eq_character elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical Calls proc~~string_t_eq_character~~CallsGraph proc~string_t_eq_character string_t_eq_character none~string string_t%string proc~string_t_eq_character->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/string_t_eq_character.html"},{"title":"string_t_eq_string_t – ","text":"module procedure string_t_eq_string_t elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~string_t_eq_string_t~~CallsGraph proc~string_t_eq_string_t string_t_eq_string_t none~string string_t%string proc~string_t_eq_string_t->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/string_t_eq_string_t.html"},{"title":"string_t_ne_character – ","text":"module procedure string_t_ne_character elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical Calls proc~~string_t_ne_character~~CallsGraph proc~string_t_ne_character string_t_ne_character none~string string_t%string proc~string_t_ne_character->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/string_t_ne_character.html"},{"title":"string_t_ne_string_t – ","text":"module procedure string_t_ne_string_t elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Calls proc~~string_t_ne_string_t~~CallsGraph proc~string_t_ne_string_t string_t_ne_string_t none~string string_t%string proc~string_t_ne_string_t->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/string_t_ne_string_t.html"},{"title":"mark_as_defined – ","text":"module procedure mark_as_defined pure module subroutine mark_as_defined(self) Interface → Arguments Type Intent Optional Attributes Name class( co_object ), intent(inout) :: self","tags":"","loc":"proc/mark_as_defined.html"},{"title":"user_defined – ","text":"module procedure user_defined pure module function user_defined(self) result(is_defined) Interface → Arguments Type Intent Optional Attributes Name class( co_object ), intent(in) :: self Return Value logical","tags":"","loc":"proc/user_defined.html"},{"title":"argument_present – ","text":"module procedure argument_present module function argument_present(acceptable_argument) result(found) Interface → list of acceptable arguments\nsample list: [character(len=len(longest_argument)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS and slashes support Windows Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical Calls proc~~argument_present~~CallsGraph proc~argument_present argument_present [] [] proc~argument_present->[] Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/argument_present.html"},{"title":"flag_value – ","text":"module procedure flag_value module function flag_value(flag) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable","tags":"","loc":"proc/flag_value.html"},{"title":"co_all – ","text":"module procedure co_all impure elemental module subroutine co_all(boolean) Interface → Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean","tags":"","loc":"proc/co_all.html"},{"title":"add – ","text":"module procedure add impure elemental module function add(lhs, rhs) result(total) Interface → Require consistent operand units Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units ) Calls proc~~add~~CallsGraph proc~add add assert assert proc~add->assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/add.html"},{"title":"assign_units – ","text":"module procedure assign_units pure module subroutine assign_units(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(inout) :: lhs class( units ), intent(in) :: rhs","tags":"","loc":"proc/assign_units.html"},{"title":"divide – ","text":"module procedure divide elemental module function divide(numerator, denominator) result(ratio) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: numerator class( units ), intent(in) :: denominator Return Value type( units ) Calls proc~~divide~~CallsGraph proc~divide divide assert assert proc~divide->assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/divide.html"},{"title":"get_system – ","text":"module procedure get_system impure elemental module function get_system(this) result(system_of_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value integer","tags":"","loc":"proc/get_system.html"},{"title":"get_units – ","text":"module procedure get_units module function get_units(this) result(exponents) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value integer, (num_fundamental)","tags":"","loc":"proc/get_units.html"},{"title":"has_density_units – ","text":"module procedure has_density_units elemental module function has_density_units(this) result(density_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical","tags":"","loc":"proc/has_density_units.html"},{"title":"has_energy_units – ","text":"module procedure has_energy_units elemental module function has_energy_units(this) result(energy_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical","tags":"","loc":"proc/has_energy_units.html"},{"title":"has_length_units – ","text":"module procedure has_length_units elemental module function has_length_units(this) result(length_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical","tags":"","loc":"proc/has_length_units.html"},{"title":"has_mass_units – ","text":"module procedure has_mass_units elemental module function has_mass_units(this) result(mass_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical","tags":"","loc":"proc/has_mass_units.html"},{"title":"has_power_units – ","text":"module procedure has_power_units elemental module function has_power_units(this) result(power_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical","tags":"","loc":"proc/has_power_units.html"},{"title":"has_specific_energy_units – ","text":"module procedure has_specific_energy_units elemental module function has_specific_energy_units(this) result(specific_energy_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical","tags":"","loc":"proc/has_specific_energy_units.html"},{"title":"has_stress_units – ","text":"module procedure has_stress_units elemental module function has_stress_units(this) result(stress_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical","tags":"","loc":"proc/has_stress_units.html"},{"title":"has_temperature_units – ","text":"module procedure has_temperature_units elemental module function has_temperature_units(this) result(temperature_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical","tags":"","loc":"proc/has_temperature_units.html"},{"title":"has_time_units – ","text":"module procedure has_time_units elemental module function has_time_units(this) result(time_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical","tags":"","loc":"proc/has_time_units.html"},{"title":"has_velocity_units – ","text":"module procedure has_velocity_units elemental module function has_velocity_units(this) result(velocity_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical","tags":"","loc":"proc/has_velocity_units.html"},{"title":"integer_power – ","text":"module procedure integer_power impure elemental module function integer_power(this, exponent_) result(this_raised) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this integer, intent(in) :: exponent_ Return Value type( units )","tags":"","loc":"proc/integer_power.html"},{"title":"is_dimensionless – ","text":"module procedure is_dimensionless elemental module function is_dimensionless(this) result(nondimensional) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical","tags":"","loc":"proc/is_dimensionless.html"},{"title":"multiply – ","text":"module procedure multiply elemental module function multiply(lhs, rhs) result(product_) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units ) Calls proc~~multiply~~CallsGraph proc~multiply multiply assert assert proc~multiply->assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/multiply.html"},{"title":"negate – ","text":"module procedure negate elemental module function negate(this) result(negative_this) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value type( units )","tags":"","loc":"proc/negate.html"},{"title":"real_power – ","text":"module procedure real_power impure elemental module function real_power(this, exponent_) result(this_raised) Interface → Require dimensionless operand => result is default-initialized as dimensionless Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this real, intent(in) :: exponent_ Return Value type( units ) Calls proc~~real_power~~CallsGraph proc~real_power real_power assert assert proc~real_power->assert interface~is_dimensionless units%is_dimensionless proc~real_power->interface~is_dimensionless Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/real_power.html"},{"title":"set_units – ","text":"module procedure set_units pure module subroutine set_units(this, exponents, system) Interface → define units exponents Arguments Type Intent Optional Attributes Name class( units ), intent(inout) :: this integer, intent(in) :: exponents (num_fundamental) integer, intent(in) :: system","tags":"","loc":"proc/set_units.html"},{"title":"subtract – ","text":"module procedure subtract impure elemental module function subtract(lhs, rhs) result(difference) Interface → Require consistent operand units Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units ) Calls proc~~subtract~~CallsGraph proc~subtract subtract assert assert proc~subtract->assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/subtract.html"},{"title":"column_vectors – ","text":"module procedure column_vectors pure module function column_vectors(vector_field) result(array_of_3D_column_vectors) Interface → Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:,:,:,:) :: vector_field Return Value real, dimension(:,:), allocatable Calls proc~~column_vectors~~CallsGraph proc~column_vectors column_vectors assert assert proc~column_vectors->assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/column_vectors.html"},{"title":"concatenate_columns – ","text":"module procedure concatenate_columns pure module function concatenate_columns(a, b) result(concatenated) Interface → Using reshape rather than manipulating array elements directly frees the compiler to decide the particular order of array\nelement references that best exploits the given platform.  Alternatively, do concurrent could instead free the compiler\nto order element accesses however is best. Trade-off: reshape requires the creation of temporary array results but reshape\nis likely to have more mature compiler support than do concurrent.  If this code turns out to be a critical performance\nbottleneck, try replacing this implementation with element-by-element copying using do concurrent. Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:,:) :: a real, intent(in), dimension(:,:) :: b Return Value real, dimension(:,:), allocatable Calls proc~~concatenate_columns~~CallsGraph proc~concatenate_columns concatenate_columns assert assert proc~concatenate_columns->assert Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/concatenate_columns.html"},{"title":"concatenate_rows – ","text":"module procedure concatenate_rows pure module function concatenate_rows(a, b) result(concatenated) Interface → For simplicity, this implementation invokes concatenate_columns at the cost of transpose creating additional temporaries.\nIf this code turns out to be a critical performance bottleneck, try replacing this implementation with element-by-element\ncopying using do concurrent. Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:,:) :: a real, intent(in), dimension(:,:) :: b Return Value real, dimension(:,:), allocatable Calls proc~~concatenate_rows~~CallsGraph proc~concatenate_rows concatenate_rows interface~concatenate_columns concatenate_columns proc~concatenate_rows->interface~concatenate_columns Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/concatenate_rows.html"},{"title":"mark_as_defined – ","text":"module procedure mark_as_defined pure module subroutine mark_as_defined(self) Interface → Arguments Type Intent Optional Attributes Name class( object_t ), intent(inout) :: self","tags":"","loc":"proc/mark_as_defined~2.html"},{"title":"user_defined – ","text":"module procedure user_defined pure module function user_defined(self) result(is_defined) Interface → Arguments Type Intent Optional Attributes Name class( object_t ), intent(in) :: self Return Value logical","tags":"","loc":"proc/user_defined~2.html"},{"title":"construct_from_character – ","text":"module procedure construct_from_character module function construct_from_character(description, test_function) result(test_description) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t )","tags":"","loc":"proc/construct_from_character~2.html"},{"title":"construct_from_string_t – ","text":"module procedure construct_from_string_t module function construct_from_string_t(description, test_function) result(test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t )","tags":"","loc":"proc/construct_from_string_t.html"},{"title":"contains_text – ","text":"module procedure contains_text impure elemental module function contains_text(self, substring) result(match) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical Calls proc~~contains_text~~CallsGraph proc~contains_text contains_text none~string string_t%string proc~contains_text->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/contains_text.html"},{"title":"equals – ","text":"module procedure equals elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"proc/equals.html"},{"title":"run – ","text":"module procedure run impure elemental module function run(self) result(test_result) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t )","tags":"","loc":"proc/run.html"},{"title":"construct – ","text":"module procedure construct private module function construct(description_vector, vector_function_strategy) result(vector_test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description_vector (:) class( vector_function_strategy_t ), intent(in) :: vector_function_strategy Return Value type( vector_test_description_t )","tags":"","loc":"proc/construct~5.html"},{"title":"contains_text – ","text":"module procedure contains_text private module function contains_text(self, substring) result(match_vector) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical, allocatable, (:) Calls proc~~contains_text~2~~CallsGraph proc~contains_text~2 contains_text none~string string_t%string proc~contains_text~2->none~string interface~as_character string_t%as_character none~string->interface~as_character Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/contains_text~2.html"},{"title":"run – ","text":"module procedure run private impure module function run(self) result(test_results) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ), allocatable, (:) Calls proc~~run~2~~CallsGraph proc~run~2 run assert assert proc~run~2->assert vector_function vector_function proc~run~2->vector_function Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"proc/run~2.html"},{"title":"sourcery_formats_m – ","text":"Useful strings for formatting print and write statements Used by Descendants: sourcery_formats_s module~~sourcery_formats_m~~UsedByGraph module~sourcery_formats_m sourcery_formats_m module~sourcery_formats_s sourcery_formats_s module~sourcery_formats_s->module~sourcery_formats_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_formats_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: cscv = \"(*('(',G0,',',G0,')',:,',')))\" comma-separated complex values character(len=*), public, parameter :: csv = \"(*(G0,:,','))\" comma-separated values Interfaces interface public pure module function separated_values(separator, mold) result(format_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:), allocatable","tags":"","loc":"module/sourcery_formats_m.html"},{"title":"sourcery_test_result_m – ","text":"Define an abstraction for describing test intentions and results Uses sourcery_string_m module~~sourcery_test_result_m~~UsesGraph module~sourcery_test_result_m sourcery_test_result_m module~sourcery_string_m sourcery_string_m module~sourcery_test_result_m->module~sourcery_string_m assert_m assert_m module~sourcery_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: sourcery_test_result_s module~~sourcery_test_result_m~~UsedByGraph module~sourcery_test_result_m sourcery_test_result_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_test_result_m module~sourcery_test_description_m sourcery_test_description_m module~sourcery_m->module~sourcery_test_description_m module~sourcery_test_m sourcery_test_m module~sourcery_m->module~sourcery_test_m module~sourcery_vector_test_description_m sourcery_vector_test_description_m module~sourcery_m->module~sourcery_vector_test_description_m module~sourcery_test_description_m->module~sourcery_test_result_m module~sourcery_test_m->module~sourcery_test_result_m module~sourcery_test_result_s sourcery_test_result_s module~sourcery_test_result_s->module~sourcery_test_result_m module~sourcery_vector_test_description_m->module~sourcery_test_result_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m module~sourcery_test_description_s sourcery_test_description_s module~sourcery_test_description_s->module~sourcery_test_description_m module~sourcery_test_s sourcery_test_s module~sourcery_test_s->module~sourcery_test_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface test_result_t private elemental module function construct_from_character(description, passed) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) private elemental module function construct_from_string(description, passed) result(test_result) Implementation → The result is a test_result_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) interface private pure module function characterize(self) result(characterization) Implementation → The result is a character description of the test and its outcome Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable interface private elemental module function description_contains(self, substring) result(substring_found) Implementation → The result is true if and only if the test description contains the substring Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical interface private impure elemental module function passed(self) result(test_passed) Implementation → The result is true if and only if the test passed on all images Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical Derived Types type, public :: test_result_t Encapsulate test descriptions and outcomes Components Type Visibility Attributes Name Initial type( string_t ), public :: description_ logical, public :: passed_ Constructor private\n\n                    elemental, module\n                    function construct_from_character (description, passed) The result is a test_result_t object with the components defined by the dummy arguments private\n\n                    elemental, module\n                    function construct_from_string (description, passed) The result is a test_result_t object with the components defined by the dummy arguments Type-Bound Procedures procedure, public :: characterize procedure, public :: description_contains procedure, public :: passed","tags":"","loc":"module/sourcery_test_result_m.html"},{"title":"sourcery_co_object_m – ","text":"Used by Descendants: sourcery_co_object_s module~~sourcery_co_object_m~~UsedByGraph module~sourcery_co_object_m sourcery_co_object_m module~sourcery_co_object_s sourcery_co_object_s module~sourcery_co_object_s->module~sourcery_co_object_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_co_object_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface private pure module subroutine mark_as_defined(self) Implementation → Mark the co_object as user-defined Arguments Type Intent Optional Attributes Name class( co_object ), intent(inout) :: self interface private pure module function user_defined(self) result(is_defined) Implementation → Return a boolean result indicating whether self co_object has been initialized since its declaration Arguments Type Intent Optional Attributes Name class( co_object ), intent(in) :: self Return Value logical Derived Types type, public, abstract :: co_object Components Type Visibility Attributes Name Initial logical, private :: defined = .false. Default initialization indicates not yet user-defined logical, private, allocatable :: facilitate_type_extension [:] Type-Bound Procedures procedure, public :: mark_as_defined procedure, public :: user_defined","tags":"","loc":"module/sourcery_co_object_m.html"},{"title":"sourcery_test_m – ","text":"Define an abstract test_t type with deferred bindings (\"subject\" and \"results\")\nused by a type-bound procedure (\"report\") for reporting test results.  The \"report\"\nprocedure thus represents an implementation of the Template Method pattern. Uses sourcery_test_result_m module~~sourcery_test_m~~UsesGraph module~sourcery_test_m sourcery_test_m module~sourcery_test_result_m sourcery_test_result_m module~sourcery_test_m->module~sourcery_test_result_m module~sourcery_string_m sourcery_string_m module~sourcery_test_result_m->module~sourcery_string_m assert_m assert_m module~sourcery_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: sourcery_test_s module~~sourcery_test_m~~UsedByGraph module~sourcery_test_m sourcery_test_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_test_m module~sourcery_test_s sourcery_test_s module~sourcery_test_s->module~sourcery_test_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=:), public, allocatable :: test_description_substring Interfaces interface private module subroutine report(test, passes, tests) Implementation → Print the test results and increment the tallies of passing tests and total tests Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests Abstract Interfaces abstract interface private  function results_interface() result(test_results) The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure Arguments None Return Value type( test_result_t ), allocatable, (:) abstract interface private pure function subject_interface() result(specimen) The result is the name of the test specimen (the subject of testing) Arguments None Return Value character(len=:), allocatable Derived Types type, public, abstract :: test_t Facilitate testing and test reporting Type-Bound Procedures procedure, public :: report procedure( results_interface ), public, deferred, nopass :: results procedure( subject_interface ), public, deferred, nopass :: subject","tags":"","loc":"module/sourcery_test_m.html"},{"title":"sourcery_bin_m – ","text":"distribute item numbers across bins such that the number of items differs by at most 1 between any two bins Used by Descendants: sourcery_bin_s module~~sourcery_bin_m~~UsedByGraph module~sourcery_bin_m sourcery_bin_m module~sourcery_bin_s sourcery_bin_s module~sourcery_bin_s->module~sourcery_bin_m module~sourcery_data_partition_m sourcery_data_partition_m module~sourcery_data_partition_m->module~sourcery_bin_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_bin_m module~sourcery_m->module~sourcery_data_partition_m module~sourcery_data_partition_s sourcery_data_partition_s module~sourcery_data_partition_s->module~sourcery_data_partition_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface bin_t private elemental module function construct(num_items, num_bins, bin_number) result(bin) Implementation → the result is a bin associated with a range of item numbers Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) interface private elemental module function first(self) result(first_item_number) Implementation → the result is the first item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer interface private elemental module function last(self) result(last_item_number) Implementation → the result is the last item number associated with the given bin Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer Derived Types type, public :: bin_t encapsulate a range of item numbers associated with a bin Components Type Visibility Attributes Name Initial integer, private :: first_ integer, private :: last_ Constructor private\n\n                    elemental, module\n                    function construct (num_items, num_bins, bin_number) the result is a bin associated with a range of item numbers Type-Bound Procedures procedure, public :: first procedure, public :: last","tags":"","loc":"module/sourcery_bin_m.html"},{"title":"sourcery_oracle_m – ","text":"verify actual output against expected Uses sourcery_object_m module~~sourcery_oracle_m~~UsesGraph module~sourcery_oracle_m sourcery_oracle_m module~sourcery_object_m sourcery_object_m module~sourcery_oracle_m->module~sourcery_object_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: sourcery_oracle_s module~~sourcery_oracle_m~~UsedByGraph module~sourcery_oracle_m sourcery_oracle_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_oracle_m module~sourcery_oracle_s sourcery_oracle_s module~sourcery_oracle_s->module~sourcery_oracle_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface private module function within_tolerance(self, reference, tolerance) result(in_tolerance) Implementation → template method with true result iff the difference in state vectors (self - reference) has a norm within tolerance\n(impure because of internal call to 'subtract' binding)\nThe existence of self procedure eliminates the need to rewrite similar code for every oracle child type. Arguments Type Intent Optional Attributes Name class( oracle_t ), intent(in) :: self class( oracle_t ), intent(in) :: reference real, intent(in) :: tolerance Return Value logical Abstract Interfaces abstract interface private pure function norm_interface(self) result(norm_of_self) result is a norm of the array formed by concatenating the real components of self object Arguments Type Intent Optional Attributes Name class( oracle_t ), intent(in) :: self Return Value real abstract interface private  function subtract_interface(self, rhs) result(difference) result has components corresponding to subtracting rhs's components fron self object's components Arguments Type Intent Optional Attributes Name class( oracle_t ), intent(in) :: self class( oracle_t ), intent(in) :: rhs Return Value class( oracle_t ), allocatable Derived Types type, public, abstract, extends( object_t ) :: oracle_t define procedures for testing output values against expected values Type-Bound Procedures procedure, public :: mark_as_defined procedure( norm_interface ), public, deferred :: norm generic, public :: operator(-) => subtract procedure( subtract_interface ), public, deferred :: subtract procedure, public :: user_defined procedure, public :: within_tolerance generic, public :: write(formatted) => write_formatted procedure( write_interface ), public, deferred :: write_formatted","tags":"","loc":"module/sourcery_oracle_m.html"},{"title":"sourcery_array_functions_m – ","text":"Functionally pure array utilities\nBecause the Fortran standard requires that operator dummy arguments have the intent(in) attribute\nexposing only the operator and not the function names communicates more information in the\npublic interface and in code using this interface. Used by Descendants: sourcery_array_functions_s module~~sourcery_array_functions_m~~UsedByGraph module~sourcery_array_functions_m sourcery_array_functions_m module~sourcery_array_functions_s sourcery_array_functions_s module~sourcery_array_functions_s->module~sourcery_array_functions_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface operator(.catColumns.) private  interface concatenate_columns () Arguments None public        interface operator(.catRows.) private  interface concatenate_rows () Arguments None public        interface operator(.columnVectors.) private  interface column_vectors () Arguments None interface private pure module function column_vectors(vector_field) result(array_of_3D_column_vectors) Implementation → Result is array of 3D column vectors of dimension (space_dim,nx ny nz) reshaped from vector-field argument\nof dimension (nx,ny,nz,space_dim) Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:,:,:,:) :: vector_field Return Value real, dimension(:,:), allocatable interface private pure module function concatenate_columns(a, b) result(concatenated) Implementation → Result contains the concatenation of the columns of argument a with the columns of argument b Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:,:) :: a real, intent(in), dimension(:,:) :: b Return Value real, dimension(:,:), allocatable interface private pure module function concatenate_rows(a, b) result(concatenated) Implementation → Result contains the concatenation of the rows of argument a with the rows of argument b Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:,:) :: a real, intent(in), dimension(:,:) :: b Return Value real, dimension(:,:), allocatable","tags":"","loc":"module/sourcery_array_functions_m.html"},{"title":"sourcery_data_partition_m – ","text":"distribute data identification numbers across images such that the number of\nitems differs by at most 1 between any two images. Uses iso_fortran_env sourcery_bin_m module~~sourcery_data_partition_m~~UsesGraph module~sourcery_data_partition_m sourcery_data_partition_m iso_fortran_env iso_fortran_env module~sourcery_data_partition_m->iso_fortran_env module~sourcery_bin_m sourcery_bin_m module~sourcery_data_partition_m->module~sourcery_bin_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: sourcery_data_partition_s module~~sourcery_data_partition_m~~UsedByGraph module~sourcery_data_partition_m sourcery_data_partition_m module~sourcery_data_partition_s sourcery_data_partition_s module~sourcery_data_partition_s->module~sourcery_data_partition_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_data_partition_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface data_partition_t private pure module function construct(cardinality) result(data_partition) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: cardinality Return Value type( data_partition_t ) interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private pure module subroutine define_partitions(self, cardinality) Implementation → define the range of data identification numbers owned by the executing image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(inout) :: self integer, intent(in) :: cardinality interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private pure module function first(self, image_number) result(first_index) Implementation → the result is the first identification number owned by the executing image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self integer, intent(in), optional :: image_number Return Value integer interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private module subroutine gather_real32_1D_array(self, a, result_image, dim) Implementation → Gather the elements of an 1D array distributed along dimension dim onto result_image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real32), intent(inout) :: a (:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private module subroutine gather_real32_2D_array(self, a, result_image, dim) Implementation → Gather the elements of an 2D array distributed along dimension dim onto result_image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real32), intent(inout) :: a (:,:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private module subroutine gather_real64_1D_array(self, a, result_image, dim) Implementation → Gather the elements of an 1D array distributed along dimension dim onto result_image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real64), intent(inout) :: a (:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private module subroutine gather_real64_2D_array(self, a, result_image, dim) Implementation → Gather the elements of an 2D array distributed along dimension dim onto result_image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real64), intent(inout) :: a (:,:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim interface Gathers are inherently expensive and are best used either\n1. Near the beginning/end of execution to amortize costs across an entire run or\n2. Temporarily while developing/debugging code. private pure module function last(self, image_number) result(last_index) Implementation → the result is the last identification number owned by the executing image Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self integer, intent(in), optional :: image_number Return Value integer Derived Types type, public :: data_partition_t encapsulate a description of the data subset the executing image owns Components Type Visibility Attributes Name Initial type( bin_t ), private, allocatable :: bin (:) Constructor private\n\n                    pure, module\n                    function construct (cardinality) Type-Bound Procedures procedure, public :: define_partitions procedure, public :: first generic, public :: gather => gather_real32_2D_array , gather_real64_2D_array , gather_real32_1D_array , gather_real64_1D_array procedure, public :: last procedure, private :: gather_real32_1D_array procedure, private :: gather_real32_2D_array procedure, private :: gather_real64_1D_array procedure, private :: gather_real64_2D_array","tags":"","loc":"module/sourcery_data_partition_m.html"},{"title":"sourcery_object_m – ","text":"Used by Descendants: sourcery_object_s module~~sourcery_object_m~~UsedByGraph module~sourcery_object_m sourcery_object_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_object_m module~sourcery_oracle_m sourcery_oracle_m module~sourcery_m->module~sourcery_oracle_m module~sourcery_object_s sourcery_object_s module~sourcery_object_s->module~sourcery_object_m module~sourcery_oracle_m->module~sourcery_object_m module~sourcery_oracle_s sourcery_oracle_s module~sourcery_oracle_s->module~sourcery_oracle_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface private pure module subroutine mark_as_defined(self) Implementation → Mark the object as user-defined Arguments Type Intent Optional Attributes Name class( object_t ), intent(inout) :: self interface private pure module function user_defined(self) result(is_defined) Implementation → Return a boolean result indicating whether self object has been initialized since its declaration Arguments Type Intent Optional Attributes Name class( object_t ), intent(in) :: self Return Value logical Abstract Interfaces abstract interface private  subroutine write_interface(self, unit, iotype, v_list, iostat, iomsg) Arguments Type Intent Optional Attributes Name class( object_t ), intent(in) :: self integer, intent(in) :: unit character(len=*), intent(in) :: iotype integer, intent(in) :: v_list (:) integer, intent(out) :: iostat character(len=*), intent(inout) :: iomsg Derived Types type, public, abstract :: object_t A\nb\ns\nt\nr\na\nc\nt t\ny\np\ne t\no e\nn\ns\nu\nr\ne a\nl\nl o\nb\nj\ne\nc\nt\ns e\nx\nt\ne\nn\nd\ni\nn\ng i\nt i\nm\np\nl\ne\nm\ne\nn\nt t\nh\ne r\ne\nq\nu\ni\nr\ne\nd m\ne\nt\nh\no\nd\ns Read more… Components Type Visibility Attributes Name Initial logical, private :: defined = .false. Default initialization indicates not yet user-defined Type-Bound Procedures procedure, public :: mark_as_defined procedure, public :: user_defined generic, public :: write(formatted) => write_formatted procedure( write_interface ), public, deferred :: write_formatted","tags":"","loc":"module/sourcery_object_m.html"},{"title":"sourcery_command_line_m – ","text":"return command line argument information Used by Descendants: sourcery_command_line_s module~~sourcery_command_line_m~~UsedByGraph module~sourcery_command_line_m sourcery_command_line_m module~sourcery_command_line_s sourcery_command_line_s module~sourcery_command_line_s->module~sourcery_command_line_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_command_line_m module~sourcery_test_s sourcery_test_s module~sourcery_test_s->module~sourcery_command_line_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface private module function argument_present(acceptable_argument) result(found) Implementation → result is .true. only if a command-line argument matches an element of this function's argument Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical interface private module function flag_value(flag) Implementation → result is the value passed adjacent to a command-line flag Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable Derived Types type, public :: command_line_t Type-Bound Procedures procedure, public, nopass :: argument_present procedure, public, nopass :: flag_value","tags":"","loc":"module/sourcery_command_line_m.html"},{"title":"sourcery_user_defined_collectives_m – ","text":"This module contains user-defined collective subroutines. Used by Descendants: sourcery_user_defined_collectives_s module~~sourcery_user_defined_collectives_m~~UsedByGraph module~sourcery_user_defined_collectives_m sourcery_user_defined_collectives_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_user_defined_collectives_m module~sourcery_test_result_s sourcery_test_result_s module~sourcery_test_result_s->module~sourcery_user_defined_collectives_m module~sourcery_test_s sourcery_test_s module~sourcery_test_s->module~sourcery_user_defined_collectives_m module~sourcery_user_defined_collectives_s sourcery_user_defined_collectives_s module~sourcery_user_defined_collectives_s->module~sourcery_user_defined_collectives_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface public impure elemental module subroutine co_all(boolean) Implementation → If any image in a team calls this subroutine, then every image in the \nthe same team must call this subroutine.  This subroutine sets the\n\"boolean\" argument .true. if it is true in all participating images\nupon entry and .false. otherwise. Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean","tags":"","loc":"module/sourcery_user_defined_collectives_m.html"},{"title":"sourcery_units_m – ","text":"Define SI and British units of measurement and associated arithmetic operators Used by Descendants: sourcery_units_s module~~sourcery_units_m~~UsedByGraph module~sourcery_units_m sourcery_units_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_units_m module~sourcery_units_s sourcery_units_s module~sourcery_units_s->module~sourcery_units_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: British_units_names (num_fundamental) = [character(len=len(\"sec\"))::\"R\", \"ft\", \"lbm\", \"sec\"] character(len=*), public, parameter :: SI_units_names (num_fundamental) = [character(len=len(\"sec\"))::\"K\", \"m\", \"kg\", \"sec\"] integer, public, parameter :: num_fundamental = 4 character(len=*), public, parameter :: units_system_names (num_systems) = [character(len=len(\"British\"))::\"SI\", \"British\"] integer, private, parameter :: num_systems = 2 Enumerations enum, bind(c) Enumerators enumerator :: K = 1 enumerator :: m = 2 enumerator :: kg = 3 enumerator :: sec = 4 enumerator :: R = 1 enumerator :: ft = 2 enumerator :: lbm = 3 enumerator :: dimensionless = 0 enumerator :: SI = 1 enumerator :: British = 2 Description Enumerate the fundamental units for dimensional units quantities\n(meters, kilograms, seconds, and degrees Kelvin) Interfaces interface private impure elemental module function add(lhs, rhs) result(total) Implementation → result is the units of the sum of two dimensional quantities; includes operand consistency check Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units ) interface private pure module subroutine assign_units(lhs, rhs) Implementation → copy units information Arguments Type Intent Optional Attributes Name class( units ), intent(inout) :: lhs class( units ), intent(in) :: rhs interface private elemental module function divide(numerator, denominator) result(ratio) Implementation → result is the units of the ratio of two dimensional quantities; includes units-sysetm consistency check Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: numerator class( units ), intent(in) :: denominator Return Value type( units ) interface private impure elemental module function get_system(this) result(system_of_units) Implementation → result is enumerated value designating units system Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value integer interface private module function get_units(this) result(exponents) Implementation → result holds the exponents of each unit in the argument (most useful when the actual argument is an expression) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value integer, (num_fundamental) interface private elemental module function has_density_units(this) result(density_units) Implementation → Return true if units match kilograms (kg/m&#94;3) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical interface private elemental module function has_energy_units(this) result(energy_units) Implementation → Return true if units match joules (J) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical interface private elemental module function has_length_units(this) result(length_units) Implementation → Return true if units match meters (m) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical interface private elemental module function has_mass_units(this) result(mass_units) Implementation → Return true if units match kilograms (kg) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical interface private elemental module function has_power_units(this) result(power_units) Implementation → Return true if units match Watts (W) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical interface private elemental module function has_specific_energy_units(this) result(specific_energy_units) Implementation → Return true if units match Joules per kilogram (J/kg) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical interface private elemental module function has_stress_units(this) result(stress_units) Implementation → Return true if units match Newtons per square meter (N/m&#94;2) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical interface private elemental module function has_temperature_units(this) result(temperature_units) Implementation → Return true if units match degrees Kelvin (K) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical interface private elemental module function has_time_units(this) result(time_units) Implementation → Return true if units match seconds (s) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical interface private elemental module function has_velocity_units(this) result(velocity_units) Implementation → Return true if units match meters/second&#94;2 (m/s&#94;2) Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical interface private impure elemental module function integer_power(this, exponent_) result(this_raised) Implementation → result has units of the opearand raised to the power \"exponent_\" Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this integer, intent(in) :: exponent_ Return Value type( units ) interface private elemental module function is_dimensionless(this) result(nondimensional) Implementation → Return true if all units exponents are zero; false otherwise. Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical interface private elemental module function multiply(lhs, rhs) result(product_) Implementation → result is the units of the product of two dimensional quantities; includes units-system consistency check Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units ) interface private elemental module function negate(this) result(negative_this) Implementation → result is the units of the negative of a dimensional quantities Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value type( units ) interface private impure elemental module function real_power(this, exponent_) result(this_raised) Implementation → result is the units of the operand raised to the power \"exponent_\"; includes check that operand is dimensionless Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this real, intent(in) :: exponent_ Return Value type( units ) interface private pure module subroutine set_units(this, exponents, system) Implementation → define units Arguments Type Intent Optional Attributes Name class( units ), intent(inout) :: this integer, intent(in) :: exponents (num_fundamental) integer, intent(in) :: system interface private impure elemental module function subtract(lhs, rhs) result(difference) Implementation → result is the units of the difference of two dimensional quantities; includes operand consistency check Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units ) Derived Types type, public :: units Morfeus universal base type for all units Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: description integer, private :: exponents_ (num_fundamental) = dimensionless Store the exponents for fundamental units integer, private :: system = dimensionless Default to SI units Type-Bound Procedures procedure, public :: add procedure, public :: assign_units generic, public :: assignment(=) => assign_units procedure, public :: divide procedure, public :: get_system procedure, public :: get_units procedure, public :: has_density_units procedure, public :: has_energy_units procedure, public :: has_length_units procedure, public :: has_mass_units procedure, public :: has_power_units procedure, public :: has_specific_energy_units procedure, public :: has_stress_units procedure, public :: has_temperature_units procedure, public :: has_time_units procedure, public :: has_velocity_units procedure, public :: integer_power procedure, public :: is_dimensionless procedure, public :: multiply procedure, public :: negate generic, public :: operator(*) => multiply generic, public :: operator(**) => integer_power , real_power generic, public :: operator(+) => add generic, public :: operator(-) => subtract , negate generic, public :: operator(/) => divide procedure, public :: real_power procedure, public :: set_units procedure, public :: subtract","tags":"","loc":"module/sourcery_units_m.html"},{"title":"sourcery_string_m – ","text":"Uses assert_m module~~sourcery_string_m~~UsesGraph module~sourcery_string_m sourcery_string_m assert_m assert_m module~sourcery_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: sourcery_string_s module~~sourcery_string_m~~UsedByGraph module~sourcery_string_m sourcery_string_m module~sourcery_file_m sourcery_file_m module~sourcery_file_m->module~sourcery_string_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_string_m module~sourcery_m->module~sourcery_file_m module~sourcery_test_description_m sourcery_test_description_m module~sourcery_m->module~sourcery_test_description_m module~sourcery_test_result_m sourcery_test_result_m module~sourcery_m->module~sourcery_test_result_m module~sourcery_vector_test_description_m sourcery_vector_test_description_m module~sourcery_m->module~sourcery_vector_test_description_m module~sourcery_test_m sourcery_test_m module~sourcery_m->module~sourcery_test_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_string_m module~sourcery_string_s->module~sourcery_m module~sourcery_test_description_m->module~sourcery_string_m module~sourcery_test_description_m->module~sourcery_test_result_m module~sourcery_test_result_m->module~sourcery_string_m module~sourcery_vector_test_description_m->module~sourcery_string_m module~sourcery_vector_test_description_m->module~sourcery_test_result_m module~sourcery_file_s sourcery_file_s module~sourcery_file_s->module~sourcery_file_m module~sourcery_test_description_s sourcery_test_description_s module~sourcery_test_description_s->module~sourcery_test_description_m module~sourcery_test_m->module~sourcery_test_result_m module~sourcery_test_result_s sourcery_test_result_s module~sourcery_test_result_s->module~sourcery_test_result_m module~sourcery_test_s sourcery_test_s module~sourcery_test_s->module~sourcery_test_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces interface public pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ), allocatable, (:) public        interface operator(.cat.) private pure module function concatenate_elements(strings) result(concatenated_strings) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) public        interface string_t private elemental module function construct(string) result(new_string) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) private elemental module function from_default_integer(i) result(string) Implementation → Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) private elemental module function from_real(x) result(string) Implementation → Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) interface private pure module function as_character(self) result(raw_string) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable interface private pure module subroutine assign_character_to_string_t(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs interface private pure module subroutine assign_string_t_to_character(lhs, rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs interface private pure module function base_name(self) result(base) Implementation → result contains all characters in file_name before the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) interface private pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) interface private elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical interface private elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical interface private elemental module function file_extension(self) result(extension) Implementation → result contains all characters in file_name after the last dot (.) Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) interface private pure module function get_json_integer(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer interface private pure module function get_json_integer_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) interface private elemental module function get_json_key(self) result(unquoted_key) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) interface private elemental module function get_json_logical(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical interface private pure module function get_json_real(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real interface private pure module function get_json_real_array(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) interface private elemental module function get_json_string(self, key, mold) result(value_) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) interface private elemental module function is_allocated(self) result(string_allocated) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical interface private pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t ) interface private pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) interface private elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical interface private elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical interface private elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical interface private elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Implementation → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical Derived Types type, public, extends(characterizable_t) :: string_t Components Type Visibility Attributes Name Initial character(len=:), private, allocatable :: string_ Constructor private\n\n                    elemental, module\n                    function construct (string) private\n\n                    elemental, module\n                    function from_default_integer (i) private\n\n                    elemental, module\n                    function from_real (x) Type-Bound Procedures procedure, public :: as_character generic, public :: assignment(= ) => assign_string_t_to_character , assign_character_to_string_t procedure, public :: base_name procedure, public :: file_extension procedure, public :: get_json_key generic, public :: get_json_value => get_json_integer_array , get_json_logical , get_json_integer , get_json_string , get_json_real , get_json_real_array procedure, public :: is_allocated generic, public :: operator(//) => string_t_cat_string_t , string_t_cat_character , character_cat_string_t generic, public :: operator(/=) => string_t_ne_string_t , string_t_ne_character , character_ne_string_t generic, public :: operator(==) => string_t_eq_string_t , string_t_eq_character , character_eq_string_t generic, public :: string => as_character procedure, private :: assign_character_to_string_t procedure, private, pass(rhs) :: assign_string_t_to_character procedure, private, pass(rhs) :: character_cat_string_t procedure, private, pass(rhs) :: character_eq_string_t procedure, private, pass(rhs) :: character_ne_string_t procedure, private :: get_json_integer procedure, private :: get_json_integer_array procedure, private :: get_json_logical procedure, private :: get_json_real procedure, private :: get_json_real_array procedure, private :: get_json_string procedure, private :: string_t_cat_character procedure, private :: string_t_cat_string_t procedure, private :: string_t_eq_character procedure, private :: string_t_eq_string_t procedure, private :: string_t_ne_character procedure, private :: string_t_ne_string_t","tags":"","loc":"module/sourcery_string_m.html"},{"title":"sourcery_vector_test_description_m – ","text":"Define an abstraction for describing test intentions and array-valued test functions Uses assert_m sourcery_test_result_m sourcery_string_m module~~sourcery_vector_test_description_m~~UsesGraph module~sourcery_vector_test_description_m sourcery_vector_test_description_m assert_m assert_m module~sourcery_vector_test_description_m->assert_m module~sourcery_string_m sourcery_string_m module~sourcery_vector_test_description_m->module~sourcery_string_m module~sourcery_test_result_m sourcery_test_result_m module~sourcery_vector_test_description_m->module~sourcery_test_result_m module~sourcery_string_m->assert_m module~sourcery_test_result_m->module~sourcery_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~sourcery_vector_test_description_m~~UsedByGraph module~sourcery_vector_test_description_m sourcery_vector_test_description_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_vector_test_description_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface vector_test_description_t private module function construct(description_vector, vector_function_strategy) result(vector_test_description) Implementation → The result is a vector_test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description_vector (:) class( vector_function_strategy_t ), intent(in) :: vector_function_strategy Return Value type( vector_test_description_t ) interface private module function contains_text(self, substring) result(match_vector) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical, allocatable, (:) interface private impure module function run(self) result(test_results) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ), allocatable, (:) Abstract Interfaces abstract interface private  function vector_function_i() result(passes) Arguments None Return Value logical, allocatable, (:) Derived Types type, public, abstract :: vector_function_strategy_t Type-Bound Procedures procedure( vector_function_i ), public, deferred, nopass :: vector_function type, public :: vector_test_description_t Encapsulate test descriptions and vector-valued test functions Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: description_vector_ (:) class( vector_function_strategy_t ), private, allocatable :: vector_function_strategy_ Constructor private\n\n                    module\n                    function construct (description_vector, vector_function_strategy) The result is a vector_test_description_t object with the components defined by the dummy arguments Type-Bound Procedures procedure, public :: contains_text procedure, public :: run Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_vector_test_description_m.html construct private module function construct(description_vector, vector_function_strategy) result(vector_test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description_vector (:) class( vector_function_strategy_t ), intent(in) :: vector_function_strategy Return Value type( vector_test_description_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_vector_test_description_m.html contains_text private module function contains_text(self, substring) result(match_vector) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self character(len=*), intent(in) :: substring Return Value logical, allocatable, (:) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_vector_test_description_m.html run private impure module function run(self) result(test_results) Interface → Arguments Type Intent Optional Attributes Name class( vector_test_description_t ), intent(in) :: self Return Value type( test_result_t ), allocatable, (:)","tags":"","loc":"module/sourcery_vector_test_description_m.html"},{"title":"sourcery_test_description_m – ","text":"Define an abstraction for describing test intentions and test functions Uses sourcery_test_result_m sourcery_string_m module~~sourcery_test_description_m~~UsesGraph module~sourcery_test_description_m sourcery_test_description_m module~sourcery_string_m sourcery_string_m module~sourcery_test_description_m->module~sourcery_string_m module~sourcery_test_result_m sourcery_test_result_m module~sourcery_test_description_m->module~sourcery_test_result_m assert_m assert_m module~sourcery_string_m->assert_m module~sourcery_test_result_m->module~sourcery_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: sourcery_test_description_s module~~sourcery_test_description_m~~UsedByGraph module~sourcery_test_description_m sourcery_test_description_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_test_description_m module~sourcery_test_description_s sourcery_test_description_s module~sourcery_test_description_s->module~sourcery_test_description_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface test_description_t private module function construct_from_character(description, test_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) private module function construct_from_string_t(description, test_function) result(test_description) Implementation → The result is a test_description_t object with the components defined by the dummy arguments Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) interface private impure elemental module function contains_text(self, substring) result(match) Implementation → The result is .true. if the test description includes the value of substring Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical interface private elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Implementation → The result is .true. if the components of the lhs & rhs are equal Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical interface private impure elemental module function run(self) result(test_result) Implementation → The result encapsulates the test description and test outcome Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t ) Abstract Interfaces abstract interface public  function test_function_i() result(passes) Arguments None Return Value logical Derived Types type, public :: test_description_t Encapsulate test descriptions and test-functions Components Type Visibility Attributes Name Initial type( string_t ), private :: description_ procedure( test_function_i ), private, pointer, nopass :: test_function_ => null() Constructor private\n\n                    module\n                    function construct_from_character (description, test_function) The result is a test_description_t object with the components defined by the dummy arguments private\n\n                    module\n                    function construct_from_string_t (description, test_function) The result is a test_description_t object with the components defined by the dummy arguments Type-Bound Procedures procedure, public :: contains_text generic, public :: operator(==) => equals procedure, public :: run procedure, private :: equals","tags":"","loc":"module/sourcery_test_description_m.html"},{"title":"sourcery_m – ","text":"export all public entities from every other sourcery module\nlegacy modules (likely to be removed in a future release): Uses sourcery_oracle_m sourcery_data_partition_m sourcery_object_m sourcery_string_m sourcery_command_line_m sourcery_units_m sourcery_vector_test_description_m sourcery_bin_m sourcery_formats_m sourcery_user_defined_collectives_m sourcery_co_object_m sourcery_file_m sourcery_test_m sourcery_test_result_m sourcery_test_description_m module~~sourcery_m~~UsesGraph module~sourcery_m sourcery_m module~sourcery_bin_m sourcery_bin_m module~sourcery_m->module~sourcery_bin_m module~sourcery_co_object_m sourcery_co_object_m module~sourcery_m->module~sourcery_co_object_m module~sourcery_command_line_m sourcery_command_line_m module~sourcery_m->module~sourcery_command_line_m module~sourcery_data_partition_m sourcery_data_partition_m module~sourcery_m->module~sourcery_data_partition_m module~sourcery_file_m sourcery_file_m module~sourcery_m->module~sourcery_file_m module~sourcery_formats_m sourcery_formats_m module~sourcery_m->module~sourcery_formats_m module~sourcery_object_m sourcery_object_m module~sourcery_m->module~sourcery_object_m module~sourcery_oracle_m sourcery_oracle_m module~sourcery_m->module~sourcery_oracle_m module~sourcery_string_m sourcery_string_m module~sourcery_m->module~sourcery_string_m module~sourcery_test_description_m sourcery_test_description_m module~sourcery_m->module~sourcery_test_description_m module~sourcery_test_m sourcery_test_m module~sourcery_m->module~sourcery_test_m module~sourcery_test_result_m sourcery_test_result_m module~sourcery_m->module~sourcery_test_result_m module~sourcery_units_m sourcery_units_m module~sourcery_m->module~sourcery_units_m module~sourcery_user_defined_collectives_m sourcery_user_defined_collectives_m module~sourcery_m->module~sourcery_user_defined_collectives_m module~sourcery_vector_test_description_m sourcery_vector_test_description_m module~sourcery_m->module~sourcery_vector_test_description_m module~sourcery_data_partition_m->module~sourcery_bin_m iso_fortran_env iso_fortran_env module~sourcery_data_partition_m->iso_fortran_env module~sourcery_file_m->module~sourcery_string_m module~sourcery_oracle_m->module~sourcery_object_m assert_m assert_m module~sourcery_string_m->assert_m module~sourcery_test_description_m->module~sourcery_string_m module~sourcery_test_description_m->module~sourcery_test_result_m module~sourcery_test_m->module~sourcery_test_result_m module~sourcery_test_result_m->module~sourcery_string_m module~sourcery_vector_test_description_m->module~sourcery_string_m module~sourcery_vector_test_description_m->module~sourcery_test_result_m module~sourcery_vector_test_description_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by module~~sourcery_m~~UsedByGraph module~sourcery_m sourcery_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs.","tags":"","loc":"module/sourcery_m.html"},{"title":"sourcery_file_m – ","text":"A representation of a file as an object Uses sourcery_string_m module~~sourcery_file_m~~UsesGraph module~sourcery_file_m sourcery_file_m module~sourcery_string_m sourcery_string_m module~sourcery_file_m->module~sourcery_string_m assert_m assert_m module~sourcery_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Used by Descendants: sourcery_file_s module~~sourcery_file_m~~UsedByGraph module~sourcery_file_m sourcery_file_m module~sourcery_file_s sourcery_file_s module~sourcery_file_s->module~sourcery_file_m module~sourcery_m sourcery_m module~sourcery_m->module~sourcery_file_m module~sourcery_string_s sourcery_string_s module~sourcery_string_s->module~sourcery_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Interfaces public        interface file_t private pure module function construct(lines) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) private module function read_lines(file_name) result(file_object) Implementation → Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) interface private pure module function lines(self) result(my_lines) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) interface private impure elemental module subroutine write_lines(self, file_name) Implementation → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in), optional :: file_name Derived Types type, public :: file_t Components Type Visibility Attributes Name Initial type( string_t ), private, allocatable :: lines_ (:) Constructor private\n\n                    pure, module\n                    function construct (lines) private\n\n                    module\n                    function read_lines (file_name) Type-Bound Procedures procedure, public :: lines procedure, public :: write_lines","tags":"","loc":"module/sourcery_file_m.html"},{"title":"sourcery_data_partition_s – ","text":"Uses assert_m Ancestors: sourcery_data_partition_m module~~sourcery_data_partition_s~~UsesGraph module~sourcery_data_partition_s sourcery_data_partition_s assert_m assert_m module~sourcery_data_partition_s->assert_m module~sourcery_data_partition_m sourcery_data_partition_m module~sourcery_data_partition_s->module~sourcery_data_partition_m iso_fortran_env iso_fortran_env module~sourcery_data_partition_m->iso_fortran_env module~sourcery_bin_m sourcery_bin_m module~sourcery_data_partition_m->module~sourcery_bin_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Variables Type Visibility Attributes Name Initial logical, private, parameter :: verbose = .false. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_data_partition_s.html construct pure module function construct(cardinality) result(data_partition) Arguments Type Intent Optional Attributes Name integer, intent(in) :: cardinality Return Value type( data_partition_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_data_partition_s.html define_partitions pure module subroutine define_partitions(self, cardinality) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(inout) :: self integer, intent(in) :: cardinality module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_data_partition_s.html first pure module function first(self, image_number) result(first_index) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self integer, intent(in), optional :: image_number Return Value integer module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_data_partition_s.html gather_real32_1D_array module subroutine gather_real32_1D_array(self, a, result_image, dim) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real32), intent(inout) :: a (:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_data_partition_s.html gather_real32_2D_array module subroutine gather_real32_2D_array(self, a, result_image, dim) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real32), intent(inout) :: a (:,:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_data_partition_s.html gather_real64_1D_array module subroutine gather_real64_1D_array(self, a, result_image, dim) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real64), intent(inout) :: a (:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_data_partition_s.html gather_real64_2D_array module subroutine gather_real64_2D_array(self, a, result_image, dim) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self real(kind=real64), intent(inout) :: a (:,:) integer, intent(in), optional :: result_image integer, intent(in), optional :: dim module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_data_partition_s.html last pure module function last(self, image_number) result(last_index) Interface → Arguments Type Intent Optional Attributes Name class( data_partition_t ), intent(in) :: self integer, intent(in), optional :: image_number Return Value integer","tags":"","loc":"module/sourcery_data_partition_s.html"},{"title":"sourcery_oracle_s – ","text":"define procedures corresponding to the interface bodies in oracle_m Uses Ancestors: sourcery_oracle_m module~~sourcery_oracle_s~~UsesGraph module~sourcery_oracle_s sourcery_oracle_s module~sourcery_oracle_m sourcery_oracle_m module~sourcery_oracle_s->module~sourcery_oracle_m module~sourcery_object_m sourcery_object_m module~sourcery_oracle_m->module~sourcery_object_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_oracle_s.html within_tolerance module function within_tolerance(self, reference, tolerance) result(in_tolerance) Interface → Arguments Type Intent Optional Attributes Name class( oracle_t ), intent(in) :: self class( oracle_t ), intent(in) :: reference real, intent(in) :: tolerance Return Value logical","tags":"","loc":"module/sourcery_oracle_s.html"},{"title":"sourcery_file_s – ","text":"Uses assert_m iso_fortran_env Ancestors: sourcery_file_m module~~sourcery_file_s~~UsesGraph module~sourcery_file_s sourcery_file_s assert_m assert_m module~sourcery_file_s->assert_m iso_fortran_env iso_fortran_env module~sourcery_file_s->iso_fortran_env module~sourcery_file_m sourcery_file_m module~sourcery_file_s->module~sourcery_file_m module~sourcery_string_m sourcery_string_m module~sourcery_file_m->module~sourcery_string_m module~sourcery_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_file_s.html construct pure module function construct(lines) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: lines (:) Return Value type( file_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_file_s.html lines pure module function lines(self) result(my_lines) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_file_s.html read_lines module function read_lines(file_name) result(file_object) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: file_name Return Value type( file_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_file_s.html write_lines impure elemental module subroutine write_lines(self, file_name) Interface → Arguments Type Intent Optional Attributes Name class( file_t ), intent(in) :: self type( string_t ), intent(in), optional :: file_name","tags":"","loc":"module/sourcery_file_s.html"},{"title":"sourcery_test_result_s – ","text":"Uses sourcery_user_defined_collectives_m Ancestors: sourcery_test_result_m module~~sourcery_test_result_s~~UsesGraph module~sourcery_test_result_s sourcery_test_result_s module~sourcery_test_result_m sourcery_test_result_m module~sourcery_test_result_s->module~sourcery_test_result_m module~sourcery_user_defined_collectives_m sourcery_user_defined_collectives_m module~sourcery_test_result_s->module~sourcery_user_defined_collectives_m module~sourcery_string_m sourcery_string_m module~sourcery_test_result_m->module~sourcery_string_m assert_m assert_m module~sourcery_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_test_result_s.html characterize pure module function characterize(self) result(characterization) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value character(len=:), allocatable module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_test_result_s.html construct_from_character elemental module function construct_from_character(description, passed) result(test_result) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_test_result_s.html construct_from_string elemental module function construct_from_string(description, passed) result(test_result) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description logical, intent(in) :: passed Return Value type( test_result_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_test_result_s.html description_contains elemental module function description_contains(self, substring) result(substring_found) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_test_result_s.html passed impure elemental module function passed(self) result(test_passed) Interface → Arguments Type Intent Optional Attributes Name class( test_result_t ), intent(in) :: self Return Value logical","tags":"","loc":"module/sourcery_test_result_s.html"},{"title":"sourcery_formats_s – ","text":"Construct separated-value formats Uses Ancestors: sourcery_formats_m module~~sourcery_formats_s~~UsesGraph module~sourcery_formats_s sourcery_formats_s module~sourcery_formats_m sourcery_formats_m module~sourcery_formats_s->module~sourcery_formats_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_formats_s.html separated_values pure module function separated_values(separator, mold) result(format_string) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: separator class(*), intent(in) :: mold (..) Return Value character(len=:), allocatable","tags":"","loc":"module/sourcery_formats_s.html"},{"title":"sourcery_bin_s – ","text":"Uses assert_m Ancestors: sourcery_bin_m module~~sourcery_bin_s~~UsesGraph module~sourcery_bin_s sourcery_bin_s assert_m assert_m module~sourcery_bin_s->assert_m module~sourcery_bin_m sourcery_bin_m module~sourcery_bin_s->module~sourcery_bin_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_bin_s.html construct elemental module function construct(num_items, num_bins, bin_number) result(bin) Arguments Type Intent Optional Attributes Name integer, intent(in) :: num_items integer, intent(in) :: num_bins integer, intent(in) :: bin_number Return Value type( bin_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_bin_s.html first elemental module function first(self) result(first_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_bin_s.html last elemental module function last(self) result(last_item_number) Interface → Arguments Type Intent Optional Attributes Name class( bin_t ), intent(in) :: self Return Value integer","tags":"","loc":"module/sourcery_bin_s.html"},{"title":"sourcery_test_s – ","text":"Uses sourcery_command_line_m sourcery_user_defined_collectives_m Ancestors: sourcery_test_m module~~sourcery_test_s~~UsesGraph module~sourcery_test_s sourcery_test_s module~sourcery_command_line_m sourcery_command_line_m module~sourcery_test_s->module~sourcery_command_line_m module~sourcery_test_m sourcery_test_m module~sourcery_test_s->module~sourcery_test_m module~sourcery_user_defined_collectives_m sourcery_user_defined_collectives_m module~sourcery_test_s->module~sourcery_user_defined_collectives_m module~sourcery_test_result_m sourcery_test_result_m module~sourcery_test_m->module~sourcery_test_result_m module~sourcery_string_m sourcery_string_m module~sourcery_test_result_m->module~sourcery_string_m assert_m assert_m module~sourcery_string_m->assert_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_test_s.html report module subroutine report(test, passes, tests) Interface → Arguments Type Intent Optional Attributes Name class( test_t ), intent(in) :: test integer, intent(inout) :: passes integer, intent(inout) :: tests","tags":"","loc":"module/sourcery_test_s.html"},{"title":"sourcery_string_s – ","text":"Uses assert_m sourcery_m Ancestors: sourcery_string_m module~~sourcery_string_s~~UsesGraph module~sourcery_string_s sourcery_string_s assert_m assert_m module~sourcery_string_s->assert_m module~sourcery_m sourcery_m module~sourcery_string_s->module~sourcery_m module~sourcery_string_m sourcery_string_m module~sourcery_string_s->module~sourcery_string_m module~sourcery_m->module~sourcery_string_m module~sourcery_bin_m sourcery_bin_m module~sourcery_m->module~sourcery_bin_m module~sourcery_co_object_m sourcery_co_object_m module~sourcery_m->module~sourcery_co_object_m module~sourcery_command_line_m sourcery_command_line_m module~sourcery_m->module~sourcery_command_line_m module~sourcery_data_partition_m sourcery_data_partition_m module~sourcery_m->module~sourcery_data_partition_m module~sourcery_file_m sourcery_file_m module~sourcery_m->module~sourcery_file_m module~sourcery_formats_m sourcery_formats_m module~sourcery_m->module~sourcery_formats_m module~sourcery_object_m sourcery_object_m module~sourcery_m->module~sourcery_object_m module~sourcery_oracle_m sourcery_oracle_m module~sourcery_m->module~sourcery_oracle_m module~sourcery_test_description_m sourcery_test_description_m module~sourcery_m->module~sourcery_test_description_m module~sourcery_test_m sourcery_test_m module~sourcery_m->module~sourcery_test_m module~sourcery_test_result_m sourcery_test_result_m module~sourcery_m->module~sourcery_test_result_m module~sourcery_units_m sourcery_units_m module~sourcery_m->module~sourcery_units_m module~sourcery_user_defined_collectives_m sourcery_user_defined_collectives_m module~sourcery_m->module~sourcery_user_defined_collectives_m module~sourcery_vector_test_description_m sourcery_vector_test_description_m module~sourcery_m->module~sourcery_vector_test_description_m module~sourcery_string_m->assert_m module~sourcery_data_partition_m->module~sourcery_bin_m iso_fortran_env iso_fortran_env module~sourcery_data_partition_m->iso_fortran_env module~sourcery_file_m->module~sourcery_string_m module~sourcery_oracle_m->module~sourcery_object_m module~sourcery_test_description_m->module~sourcery_string_m module~sourcery_test_description_m->module~sourcery_test_result_m module~sourcery_test_m->module~sourcery_test_result_m module~sourcery_test_result_m->module~sourcery_string_m module~sourcery_vector_test_description_m->assert_m module~sourcery_vector_test_description_m->module~sourcery_string_m module~sourcery_vector_test_description_m->module~sourcery_test_result_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html array_of_strings pure module function array_of_strings(delimited_strings, delimiter) result(strings_array) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: delimited_strings character(len=*), intent(in) :: delimiter Return Value type( string_t ), allocatable, (:) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html as_character pure module function as_character(self) result(raw_string) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value character(len=:), allocatable module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html assign_character_to_string_t pure module subroutine assign_character_to_string_t(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(inout) :: lhs character(len=*), intent(in) :: rhs module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html assign_string_t_to_character pure module subroutine assign_string_t_to_character(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=:), intent(out), allocatable :: lhs class( string_t ), intent(in) :: rhs module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html base_name pure module function base_name(self) result(base) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html character_cat_string_t pure module function character_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html character_eq_string_t elemental module function character_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html character_ne_string_t elemental module function character_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html concatenate_elements pure module function concatenate_elements(strings) result(concatenated_strings) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: strings (:) Return Value type( string_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html construct elemental module function construct(string) result(new_string) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: string Return Value type( string_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html file_extension elemental module function file_extension(self) result(extension) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html from_default_integer elemental module function from_default_integer(i) result(string) Arguments Type Intent Optional Attributes Name integer, intent(in) :: i Return Value type( string_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html from_real elemental module function from_real(x) result(string) Arguments Type Intent Optional Attributes Name real, intent(in) :: x Return Value type( string_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html get_json_integer pure module function get_json_integer(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold Return Value integer module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html get_json_integer_array pure module function get_json_integer_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key integer, intent(in) :: mold (:) Return Value integer, allocatable, (:) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html get_json_key elemental module function get_json_key(self) result(unquoted_key) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value type( string_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html get_json_logical elemental module function get_json_logical(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key logical, intent(in) :: mold Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html get_json_real pure module function get_json_real(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold Return Value real module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html get_json_real_array pure module function get_json_real_array(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key real, intent(in) :: mold (:) Return Value real, allocatable, (:) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html get_json_string elemental module function get_json_string(self, key, mold) result(value_) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self class( string_t ), intent(in) :: key class( string_t ), intent(in) :: mold Return Value type( string_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html is_allocated elemental module function is_allocated(self) result(string_allocated) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: self Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html string_t_cat_character pure module function string_t_cat_character(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value type( string_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html string_t_cat_string_t pure module function string_t_cat_string_t(lhs, rhs) result(lhs_cat_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value type( string_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html string_t_eq_character elemental module function string_t_eq_character(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html string_t_eq_string_t elemental module function string_t_eq_string_t(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html string_t_ne_character elemental module function string_t_ne_character(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs character(len=*), intent(in) :: rhs Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_string_s.html string_t_ne_string_t elemental module function string_t_ne_string_t(lhs, rhs) result(lhs_ne_rhs) Interface → Arguments Type Intent Optional Attributes Name class( string_t ), intent(in) :: lhs class( string_t ), intent(in) :: rhs Return Value logical","tags":"","loc":"module/sourcery_string_s.html"},{"title":"sourcery_co_object_s – ","text":"Uses Ancestors: sourcery_co_object_m module~~sourcery_co_object_s~~UsesGraph module~sourcery_co_object_s sourcery_co_object_s module~sourcery_co_object_m sourcery_co_object_m module~sourcery_co_object_s->module~sourcery_co_object_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_co_object_s.html mark_as_defined pure module subroutine mark_as_defined(self) Interface → Arguments Type Intent Optional Attributes Name class( co_object ), intent(inout) :: self module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_co_object_s.html user_defined pure module function user_defined(self) result(is_defined) Interface → Arguments Type Intent Optional Attributes Name class( co_object ), intent(in) :: self Return Value logical","tags":"","loc":"module/sourcery_co_object_s.html"},{"title":"sourcery_command_line_s – ","text":"Uses Ancestors: sourcery_command_line_m module~~sourcery_command_line_s~~UsesGraph module~sourcery_command_line_s sourcery_command_line_s module~sourcery_command_line_m sourcery_command_line_m module~sourcery_command_line_s->module~sourcery_command_line_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_command_line_s.html argument_present module function argument_present(acceptable_argument) result(found) Interface → list of acceptable arguments\nsample list: [character(len=len(longest_argument)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS and slashes support Windows Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: acceptable_argument (:) sample list: [character(len=len( )):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"]\nwhere dashes support Linux/macOS, slashes support Windows, and must be replaced\nby the longest list element (\"--benchmark\" above) Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_command_line_s.html flag_value module function flag_value(flag) Interface → Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: flag Return Value character(len=:), allocatable","tags":"","loc":"module/sourcery_command_line_s.html"},{"title":"sourcery_user_defined_collectives_s – ","text":"Uses Ancestors: sourcery_user_defined_collectives_m module~~sourcery_user_defined_collectives_s~~UsesGraph module~sourcery_user_defined_collectives_s sourcery_user_defined_collectives_s module~sourcery_user_defined_collectives_m sourcery_user_defined_collectives_m module~sourcery_user_defined_collectives_s->module~sourcery_user_defined_collectives_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_user_defined_collectives_s.html co_all impure elemental module subroutine co_all(boolean) Interface → Arguments Type Intent Optional Attributes Name logical, intent(inout) :: boolean","tags":"","loc":"module/sourcery_user_defined_collectives_s.html"},{"title":"sourcery_units_s – ","text":"Uses assert_m Ancestors: sourcery_units_m module~~sourcery_units_s~~UsesGraph module~sourcery_units_s sourcery_units_s assert_m assert_m module~sourcery_units_s->assert_m module~sourcery_units_m sourcery_units_m module~sourcery_units_s->module~sourcery_units_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html add impure elemental module function add(lhs, rhs) result(total) Interface → Require consistent operand units Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html assign_units pure module subroutine assign_units(lhs, rhs) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(inout) :: lhs class( units ), intent(in) :: rhs module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html divide elemental module function divide(numerator, denominator) result(ratio) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: numerator class( units ), intent(in) :: denominator Return Value type( units ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html get_system impure elemental module function get_system(this) result(system_of_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value integer module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html get_units module function get_units(this) result(exponents) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value integer, (num_fundamental) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html has_density_units elemental module function has_density_units(this) result(density_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html has_energy_units elemental module function has_energy_units(this) result(energy_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html has_length_units elemental module function has_length_units(this) result(length_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html has_mass_units elemental module function has_mass_units(this) result(mass_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html has_power_units elemental module function has_power_units(this) result(power_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html has_specific_energy_units elemental module function has_specific_energy_units(this) result(specific_energy_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html has_stress_units elemental module function has_stress_units(this) result(stress_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html has_temperature_units elemental module function has_temperature_units(this) result(temperature_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html has_time_units elemental module function has_time_units(this) result(time_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html has_velocity_units elemental module function has_velocity_units(this) result(velocity_units) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html integer_power impure elemental module function integer_power(this, exponent_) result(this_raised) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this integer, intent(in) :: exponent_ Return Value type( units ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html is_dimensionless elemental module function is_dimensionless(this) result(nondimensional) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html multiply elemental module function multiply(lhs, rhs) result(product_) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html negate elemental module function negate(this) result(negative_this) Interface → Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this Return Value type( units ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html real_power impure elemental module function real_power(this, exponent_) result(this_raised) Interface → Require dimensionless operand => result is default-initialized as dimensionless Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: this real, intent(in) :: exponent_ Return Value type( units ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html set_units pure module subroutine set_units(this, exponents, system) Interface → define units exponents Arguments Type Intent Optional Attributes Name class( units ), intent(inout) :: this integer, intent(in) :: exponents (num_fundamental) integer, intent(in) :: system module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_units_s.html subtract impure elemental module function subtract(lhs, rhs) result(difference) Interface → Require consistent operand units Arguments Type Intent Optional Attributes Name class( units ), intent(in) :: lhs class( units ), intent(in) :: rhs Return Value type( units )","tags":"","loc":"module/sourcery_units_s.html"},{"title":"sourcery_array_functions_s – ","text":"Uses assert_m Ancestors: sourcery_array_functions_m module~~sourcery_array_functions_s~~UsesGraph module~sourcery_array_functions_s sourcery_array_functions_s assert_m assert_m module~sourcery_array_functions_s->assert_m module~sourcery_array_functions_m sourcery_array_functions_m module~sourcery_array_functions_s->module~sourcery_array_functions_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_array_functions_s.html column_vectors pure module function column_vectors(vector_field) result(array_of_3D_column_vectors) Interface → Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:,:,:,:) :: vector_field Return Value real, dimension(:,:), allocatable module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_array_functions_s.html concatenate_columns pure module function concatenate_columns(a, b) result(concatenated) Interface → Using reshape rather than manipulating array elements directly frees the compiler to decide the particular order of array\nelement references that best exploits the given platform.  Alternatively, do concurrent could instead free the compiler\nto order element accesses however is best. Trade-off: reshape requires the creation of temporary array results but reshape\nis likely to have more mature compiler support than do concurrent.  If this code turns out to be a critical performance\nbottleneck, try replacing this implementation with element-by-element copying using do concurrent. Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:,:) :: a real, intent(in), dimension(:,:) :: b Return Value real, dimension(:,:), allocatable module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_array_functions_s.html concatenate_rows pure module function concatenate_rows(a, b) result(concatenated) Interface → For simplicity, this implementation invokes concatenate_columns at the cost of transpose creating additional temporaries.\nIf this code turns out to be a critical performance bottleneck, try replacing this implementation with element-by-element\ncopying using do concurrent. Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:,:) :: a real, intent(in), dimension(:,:) :: b Return Value real, dimension(:,:), allocatable","tags":"","loc":"module/sourcery_array_functions_s.html"},{"title":"sourcery_object_s – ","text":"Uses Ancestors: sourcery_object_m module~~sourcery_object_s~~UsesGraph module~sourcery_object_s sourcery_object_s module~sourcery_object_m sourcery_object_m module~sourcery_object_s->module~sourcery_object_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_object_s.html mark_as_defined pure module subroutine mark_as_defined(self) Interface → Arguments Type Intent Optional Attributes Name class( object_t ), intent(inout) :: self module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_object_s.html user_defined pure module function user_defined(self) result(is_defined) Interface → Arguments Type Intent Optional Attributes Name class( object_t ), intent(in) :: self Return Value logical","tags":"","loc":"module/sourcery_object_s.html"},{"title":"sourcery_test_description_s – ","text":"Uses Ancestors: sourcery_test_description_m module~~sourcery_test_description_s~~UsesGraph module~sourcery_test_description_s sourcery_test_description_s module~sourcery_test_description_m sourcery_test_description_m module~sourcery_test_description_s->module~sourcery_test_description_m module~sourcery_string_m sourcery_string_m module~sourcery_test_description_m->module~sourcery_string_m module~sourcery_test_result_m sourcery_test_result_m module~sourcery_test_description_m->module~sourcery_test_result_m assert_m assert_m module~sourcery_string_m->assert_m module~sourcery_test_result_m->module~sourcery_string_m Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Module Procedures module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_test_description_s.html construct_from_character module function construct_from_character(description, test_function) result(test_description) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_test_description_s.html construct_from_string_t module function construct_from_string_t(description, test_function) result(test_description) Arguments Type Intent Optional Attributes Name type( string_t ), intent(in) :: description procedure( test_function_i ), intent(in), pointer :: test_function Return Value type( test_description_t ) module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_test_description_s.html contains_text impure elemental module function contains_text(self, substring) result(match) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self type( string_t ), intent(in) :: substring Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_test_description_s.html equals elemental module function equals(lhs, rhs) result(lhs_eq_rhs) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: lhs class( test_description_t ), intent(in) :: rhs Return Value logical module procedure /home/runner/work/sourcery/sourcery/doc/html/module/sourcery_test_description_s.html run impure elemental module function run(self) result(test_result) Interface → Arguments Type Intent Optional Attributes Name class( test_description_t ), intent(in) :: self Return Value type( test_result_t )","tags":"","loc":"module/sourcery_test_description_s.html"},{"title":"sourcery_data_partition_s.f90 – ","text":"This file depends on sourcefile~~sourcery_data_partition_s.f90~~EfferentGraph sourcefile~sourcery_data_partition_s.f90 sourcery_data_partition_s.f90 sourcefile~sourcery_data_partition_m.f90 sourcery_data_partition_m.f90 sourcefile~sourcery_data_partition_s.f90->sourcefile~sourcery_data_partition_m.f90 sourcefile~sourcery_bin_m.f90 sourcery_bin_m.f90 sourcefile~sourcery_data_partition_m.f90->sourcefile~sourcery_bin_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code submodule ( sourcery_data_partition_m ) sourcery_data_partition_s use assert_m , only : assert implicit none logical , parameter :: verbose = . false . contains module procedure define_partitions integer image associate ( ni => num_images ()) self % bin = [( bin_t ( num_items = cardinality , num_bins = ni , bin_number = image ), image = 1 , ni )] end associate end procedure module procedure construct call data_partition % define_partitions ( cardinality ) end procedure module procedure first integer image call assert ( allocated ( self % bin ), \"data_partition_s(first): allocated(self%bin)\" ) if ( present ( image_number )) then image = image_number else image = this_image () end if first_index = self % bin ( image )% first () end procedure module procedure last integer image call assert ( allocated ( self % bin ), \"data_partition_s(last): allocated(self%in)\" ) if ( present ( image_number )) then image = image_number else image = this_image () end if last_index = self % bin ( image )% last () end procedure module procedure gather_real32_1D_array if ( present ( dim )) call assert ( dim == 1 , \"dimensioned partitioned == 1\" ) associate ( me => this_image () ) if ( verbose ) then write ( 6 , * ) 'gather_real_1D_array(): executing on image' , me flush ( 6 ) end if associate ( first => self % first ( me ), last => self % last ( me )) if (. not . present ( result_image )) then a ( 1 : first - 1 ) = 0. a ( last + 1 :) = 0. call co_sum ( a ) else block real ( real32 ), allocatable , dimension (:) :: a_lower , a_upper a_lower = a ( 1 : first - 1 ) a_upper = a ( last + 1 :) a ( 1 : first - 1 ) = 0. a ( last + 1 :) = 0. call co_sum ( a , result_image = result_image ) if ( result_image /= me ) then a ( 1 : first - 1 ) = a_lower a ( last + 1 :) = a_upper end if end block end if end associate end associate end procedure module procedure gather_real64_1D_array if ( present ( dim )) call assert ( dim == 1 , \"dimensioned partitioned == 1\" ) associate ( me => this_image () ) if ( verbose ) then write ( 6 , * ) 'gather_real_1D_array(): executing on image' , me flush ( 6 ) end if associate ( first => self % first ( me ), last => self % last ( me )) if (. not . present ( result_image )) then a ( 1 : first - 1 ) = 0. a ( last + 1 :) = 0. call co_sum ( a ) else block real ( real64 ), allocatable , dimension (:) :: a_lower , a_upper a_lower = a ( 1 : first - 1 ) a_upper = a ( last + 1 :) a ( 1 : first - 1 ) = 0. a ( last + 1 :) = 0. call co_sum ( a , result_image = result_image ) if ( result_image /= me ) then a ( 1 : first - 1 ) = a_lower a ( last + 1 :) = a_upper end if end block end if end associate end associate end procedure module procedure gather_real32_2D_array integer dim_ if ( present ( dim )) then dim_ = dim else dim_ = 2 end if associate ( me => this_image () ) if ( verbose ) then write ( 6 , * ) 'gather_real32_2D_array(): executing on image' , me flush ( 6 ) end if associate ( first => self % first ( me ), last => self % last ( me )) if (. not . present ( result_image )) then select case ( dim_ ) case ( 1 ) a ( 1 : first - 1 , :) = 0. a ( last + 1 :, :) = 0. case ( 2 ) a (:, 1 : first - 1 ) = 0. a (:, last + 1 :) = 0. case default error stop \"gather_real32_2D_array: invalid dim argument\" end select call co_sum ( a ) else block real ( real32 ), allocatable , dimension (:,:) :: a_lower , a_upper select case ( dim_ ) case ( 1 ) a_lower = a ( 1 : first - 1 , :) a_upper = a ( last + 1 :, :) a ( 1 : first - 1 , :) = 0. a ( last + 1 :, :) = 0. case ( 2 ) a_lower = a (:, 1 : first - 1 ) a_upper = a (:, last + 1 :) a (:, 1 : first - 1 ) = 0. a (:, last + 1 :) = 0. case default error stop \"gather_real32_2D_array: invalid dim argument\" end select call co_sum ( a , result_image = result_image ) if ( result_image /= me ) then select case ( dim_ ) case ( 1 ) a ( 1 : first - 1 , :) = a_lower a ( last + 1 :, :) = a_upper case ( 2 ) a (:, 1 : first - 1 ) = a_lower a (:, last + 1 :) = a_upper case default error stop \"gather_real32_2D_array: invalid dim argument\" end select end if end block end if end associate end associate end procedure module procedure gather_real64_2D_array integer dim_ if ( present ( dim )) then dim_ = dim else dim_ = 2 end if associate ( me => this_image () ) if ( verbose ) then write ( 6 , * ) 'gather_real64_2D_array(): executing on image' , me flush ( 6 ) end if associate ( first => self % first ( me ), last => self % last ( me )) if (. not . present ( result_image )) then select case ( dim_ ) case ( 1 ) a ( 1 : first - 1 , :) = 0. a ( last + 1 :, :) = 0. case ( 2 ) a (:, 1 : first - 1 ) = 0. a (:, last + 1 :) = 0. case default error stop \"gather_real64_2D_array: invalid dim argument\" end select call co_sum ( a ) else block real ( real64 ), allocatable , dimension (:,:) :: a_lower , a_upper select case ( dim_ ) case ( 1 ) a_lower = a ( 1 : first - 1 , :) a_upper = a ( last + 1 :, :) a ( 1 : first - 1 , :) = 0. a ( last + 1 :, :) = 0. case ( 2 ) a_lower = a (:, 1 : first - 1 ) a_upper = a (:, last + 1 :) a (:, 1 : first - 1 ) = 0. a (:, last + 1 :) = 0. case default error stop \"gather_real64_2D_array: invalid dim argument\" end select call co_sum ( a , result_image = result_image ) if ( result_image /= me ) then select case ( dim_ ) case ( 1 ) a ( 1 : first - 1 , :) = a_lower a ( last + 1 :, :) = a_upper case ( 2 ) a (:, 1 : first - 1 ) = a_lower a (:, last + 1 :) = a_upper case default error stop \"gather_real64_2D_array: invalid dim argument\" end select end if end block end if end associate end associate end procedure end submodule sourcery_data_partition_s","tags":"","loc":"sourcefile/sourcery_data_partition_s.f90.html"},{"title":"sourcery_formats_m.F90 – ","text":"Files dependent on this one sourcefile~~sourcery_formats_m.f90~~AfferentGraph sourcefile~sourcery_formats_m.f90 sourcery_formats_m.F90 sourcefile~sourcery_formats_s.f90 sourcery_formats_s.F90 sourcefile~sourcery_formats_s.f90->sourcefile~sourcery_formats_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_formats_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module sourcery_formats_m !! Useful strings for formatting `print` and `write` statements implicit none character ( len =* ), parameter :: csv = \"(*(G0,:,','))\" !! comma-separated values character ( len =* ), parameter :: cscv = \"(*('(',G0,',',G0,')',:,',')))\" !! comma-separated complex values #ifndef _CRAYFTN interface pure module function separated_values ( separator , mold ) result ( format_string ) character ( len =* ), intent ( in ) :: separator class ( * ), intent ( in ) :: mold (..) character ( len = :), allocatable :: format_string end function end interface #else interface separated_values pure module function separated_values_1D ( separator , mold ) result ( format_string ) character ( len =* ), intent ( in ) :: separator class ( * ), intent ( in ) :: mold (:) character ( len = :), allocatable :: format_string end function end interface #endif end module","tags":"","loc":"sourcefile/sourcery_formats_m.f90.html"},{"title":"sourcery_test_result_m.f90 – ","text":"This file depends on sourcefile~~sourcery_test_result_m.f90~~EfferentGraph sourcefile~sourcery_test_result_m.f90 sourcery_test_result_m.f90 sourcefile~sourcery_string_m.f90 sourcery_string_m.f90 sourcefile~sourcery_test_result_m.f90->sourcefile~sourcery_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~sourcery_test_result_m.f90~~AfferentGraph sourcefile~sourcery_test_result_m.f90 sourcery_test_result_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_test_description_m.f90 sourcery_test_description_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_description_m.f90 sourcefile~sourcery_test_m.f90 sourcery_test_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_m.f90 sourcefile~sourcery_vector_test_description_m.f90 sourcery_vector_test_description_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_vector_test_description_m.f90 sourcefile~sourcery_test_description_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_test_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_test_result_s.f90 sourcery_test_result_s.f90 sourcefile~sourcery_test_result_s.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_vector_test_description_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 sourcefile~sourcery_test_description_s.f90 sourcery_test_description_s.f90 sourcefile~sourcery_test_description_s.f90->sourcefile~sourcery_test_description_m.f90 sourcefile~sourcery_test_s.f90 sourcery_test_s.F90 sourcefile~sourcery_test_s.f90->sourcefile~sourcery_test_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module sourcery_test_result_m !! Define an abstraction for describing test intentions and results use sourcery_string_m , only : string_t implicit none private public :: test_result_t type test_result_t !! Encapsulate test descriptions and outcomes !private type ( string_t ) description_ logical passed_ contains procedure :: characterize procedure :: passed procedure :: description_contains end type interface test_result_t elemental module function construct_from_character ( description , passed ) result ( test_result ) !! The result is a test_result_t object with the components defined by the dummy arguments implicit none character ( len =* ), intent ( in ) :: description logical , intent ( in ) :: passed type ( test_result_t ) test_result end function elemental module function construct_from_string ( description , passed ) result ( test_result ) !! The result is a test_result_t object with the components defined by the dummy arguments implicit none type ( string_t ), intent ( in ) :: description logical , intent ( in ) :: passed type ( test_result_t ) test_result end function end interface interface pure module function characterize ( self ) result ( characterization ) !! The result is a character description of the test and its outcome implicit none class ( test_result_t ), intent ( in ) :: self character ( len = :), allocatable :: characterization end function impure elemental module function passed ( self ) result ( test_passed ) !! The result is true if and only if the test passed on all images implicit none class ( test_result_t ), intent ( in ) :: self logical test_passed end function elemental module function description_contains ( self , substring ) result ( substring_found ) !! The result is true if and only if the test description contains the substring implicit none class ( test_result_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: substring logical substring_found end function end interface end module sourcery_test_result_m","tags":"","loc":"sourcefile/sourcery_test_result_m.f90.html"},{"title":"sourcery_co_object_m.f90 – ","text":"Files dependent on this one sourcefile~~sourcery_co_object_m.f90~~AfferentGraph sourcefile~sourcery_co_object_m.f90 sourcery_co_object_m.f90 sourcefile~sourcery_co_object_implementation.f90 sourcery_co_object_implementation.f90 sourcefile~sourcery_co_object_implementation.f90->sourcefile~sourcery_co_object_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_co_object_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! module sourcery_co_object_m implicit none private public :: co_object ! Define an abstract parent type to ensure basic functionality expected to be provided by all non-abstract types. ! Each non-abstract type provides the functionality by extending self type and implementing its deferred binding(s).  This ! type resembles java's Object class in the sense that it is intended to be the ultimate ancester of every other type. type , abstract :: co_object private logical :: defined = . false . !! Default initialization indicates not yet user-defined logical , allocatable :: facilitate_type_extension [:] contains procedure :: mark_as_defined procedure :: user_defined end type interface pure module subroutine mark_as_defined ( self ) !! Mark the co_object as user-defined implicit none class ( co_object ), intent ( inout ) :: self end subroutine pure module function user_defined ( self ) result ( is_defined ) !! Return a boolean result indicating whether self co_object has been initialized since its declaration implicit none class ( co_object ), intent ( in ) :: self logical :: is_defined end function end interface end module sourcery_co_object_m","tags":"","loc":"sourcefile/sourcery_co_object_m.f90.html"},{"title":"sourcery_test_m.f90 – ","text":"This file depends on sourcefile~~sourcery_test_m.f90~~EfferentGraph sourcefile~sourcery_test_m.f90 sourcery_test_m.f90 sourcefile~sourcery_test_result_m.f90 sourcery_test_result_m.f90 sourcefile~sourcery_test_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_string_m.f90 sourcery_string_m.f90 sourcefile~sourcery_test_result_m.f90->sourcefile~sourcery_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~sourcery_test_m.f90~~AfferentGraph sourcefile~sourcery_test_m.f90 sourcery_test_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_m.f90 sourcefile~sourcery_test_s.f90 sourcery_test_s.F90 sourcefile~sourcery_test_s.f90->sourcefile~sourcery_test_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module sourcery_test_m !! Define an abstract test_t type with deferred bindings (\"subject\" and \"results\") !! used by a type-bound procedure (\"report\") for reporting test results.  The \"report\" !! procedure thus represents an implementation of the Template Method pattern. use sourcery_test_result_m , only : test_result_t implicit none private public :: test_t , test_description_substring character ( len = :), allocatable , protected :: test_description_substring type , abstract :: test_t !! Facilitate testing and test reporting contains procedure ( subject_interface ), nopass , deferred :: subject procedure ( results_interface ), nopass , deferred :: results procedure :: report end type abstract interface pure function subject_interface () result ( specimen ) !! The result is the name of the test specimen (the subject of testing) character ( len = :), allocatable :: specimen end function function results_interface () result ( test_results ) !! The result is an array of test results for subsequent reporting in the \"report\" type-bound procedure import test_result_t type ( test_result_t ), allocatable :: test_results (:) end function end interface interface module subroutine report ( test , passes , tests ) !! Print the test results and increment the tallies of passing tests and total tests implicit none class ( test_t ), intent ( in ) :: test integer , intent ( inout ) :: passes , tests end subroutine end interface end module sourcery_test_m","tags":"","loc":"sourcefile/sourcery_test_m.f90.html"},{"title":"sourcery_bin_m.f90 – ","text":"Files dependent on this one sourcefile~~sourcery_bin_m.f90~~AfferentGraph sourcefile~sourcery_bin_m.f90 sourcery_bin_m.f90 sourcefile~sourcery_bin_s.f90 sourcery_bin_s.f90 sourcefile~sourcery_bin_s.f90->sourcefile~sourcery_bin_m.f90 sourcefile~sourcery_data_partition_m.f90 sourcery_data_partition_m.f90 sourcefile~sourcery_data_partition_m.f90->sourcefile~sourcery_bin_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_bin_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_data_partition_m.f90 sourcefile~sourcery_data_partition_s.f90 sourcery_data_partition_s.f90 sourcefile~sourcery_data_partition_s.f90->sourcefile~sourcery_data_partition_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module sourcery_bin_m !! distribute item numbers across bins such that the number of items differs by at most 1 between any two bins implicit none private public :: bin_t type bin_t !! encapsulate a range of item numbers associated with a bin private integer first_ , last_ contains procedure first procedure last end type interface bin_t elemental module function construct ( num_items , num_bins , bin_number ) result ( bin ) !! the result is a bin associated with a range of item numbers integer , intent ( in ) :: num_items , num_bins , bin_number type ( bin_t ) bin end function end interface interface elemental module function first ( self ) result ( first_item_number ) !! the result is the first item number associated with the given bin implicit none class ( bin_t ), intent ( in ) :: self integer first_item_number end function elemental module function last ( self ) result ( last_item_number ) !! the result is the last item number associated with the given bin implicit none class ( bin_t ), intent ( in ) :: self integer last_item_number end function end interface end module sourcery_bin_m","tags":"","loc":"sourcefile/sourcery_bin_m.f90.html"},{"title":"sourcery_oracle_m.f90 – ","text":"This file depends on sourcefile~~sourcery_oracle_m.f90~~EfferentGraph sourcefile~sourcery_oracle_m.f90 sourcery_oracle_m.f90 sourcefile~sourcery_object_m.f90 sourcery_object_m.f90 sourcefile~sourcery_oracle_m.f90->sourcefile~sourcery_object_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~sourcery_oracle_m.f90~~AfferentGraph sourcefile~sourcery_oracle_m.f90 sourcery_oracle_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_oracle_m.f90 sourcefile~sourcery_oracle_s.f90 sourcery_oracle_s.f90 sourcefile~sourcery_oracle_s.f90->sourcefile~sourcery_oracle_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module sourcery_oracle_m !! verify actual output against expected use sourcery_object_m , only : object_t implicit none private public :: oracle_t type , abstract , extends ( object_t ) :: oracle_t !! define procedures for testing output values against expected values contains procedure ( subtract_interface ), deferred :: subtract procedure ( norm_interface ), deferred :: norm generic :: operator ( - ) => subtract procedure :: within_tolerance end type abstract interface function subtract_interface ( self , rhs ) result ( difference ) !! result has components corresponding to subtracting rhs's components fron self object's components import oracle_t implicit none class ( oracle_t ), intent ( in ) :: self , rhs class ( oracle_t ), allocatable :: difference end function pure function norm_interface ( self ) result ( norm_of_self ) !! result is a norm of the array formed by concatenating the real components of self object import oracle_t implicit none class ( oracle_t ), intent ( in ) :: self real norm_of_self end function end interface interface module function within_tolerance ( self , reference , tolerance ) result ( in_tolerance ) !! template method with true result iff the difference in state vectors (self - reference) has a norm within tolerance !! (impure because of internal call to 'subtract' binding) !! The existence of self procedure eliminates the need to rewrite similar code for every oracle child type. implicit none class ( oracle_t ), intent ( in ) :: self , reference real , intent ( in ) :: tolerance logical in_tolerance end function end interface end module","tags":"","loc":"sourcefile/sourcery_oracle_m.f90.html"},{"title":"sourcery_array_functions_m.f90 – ","text":"Files dependent on this one sourcefile~~sourcery_array_functions_m.f90~~AfferentGraph sourcefile~sourcery_array_functions_m.f90 sourcery_array_functions_m.f90 sourcefile~sourcery_array_functions_s.f90 sourcery_array_functions_s.f90 sourcefile~sourcery_array_functions_s.f90->sourcefile~sourcery_array_functions_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! module sourcery_array_functions_m !! author: Damian Rouson !! date: 04/25/2019 !! !! Functionally pure array utilities implicit none private public :: operator (. catColumns .) public :: operator (. catRows .) public :: operator (. columnVectors .) !! Because the Fortran standard requires that operator dummy arguments have the intent(in) attribute !! exposing only the operator and not the function names communicates more information in the !! public interface and in code using this interface. interface operator (. columnVectors .) module procedure column_vectors end interface interface operator (. catColumns .) module procedure concatenate_columns end interface interface operator (. catRows .) module procedure concatenate_rows end interface interface pure module function column_vectors ( vector_field ) result ( array_of_3D_column_vectors ) !! Result is array of 3D column vectors of dimension (space_dim,nx*ny*nz) reshaped from vector-field argument !! of dimension (nx,ny,nz,space_dim) implicit none real , dimension (:,:,:,:), intent ( in ) :: vector_field real , dimension (:,:), allocatable :: array_of_3D_column_vectors end function pure module function concatenate_columns ( a , b ) result ( concatenated ) !! Result contains the concatenation of the columns of argument a with the columns of argument b implicit none real , dimension (:,:), intent ( in ) :: a , b real , dimension (:,:), allocatable :: concatenated end function pure module function concatenate_rows ( a , b ) result ( concatenated ) !! Result contains the concatenation of the rows of argument a with the rows of argument b implicit none real , dimension (:,:), intent ( in ) :: a , b real , dimension (:,:), allocatable :: concatenated end function end interface end module","tags":"","loc":"sourcefile/sourcery_array_functions_m.f90.html"},{"title":"sourcery_oracle_s.f90 – ","text":"This file depends on sourcefile~~sourcery_oracle_s.f90~~EfferentGraph sourcefile~sourcery_oracle_s.f90 sourcery_oracle_s.f90 sourcefile~sourcery_oracle_m.f90 sourcery_oracle_m.f90 sourcefile~sourcery_oracle_s.f90->sourcefile~sourcery_oracle_m.f90 sourcefile~sourcery_object_m.f90 sourcery_object_m.f90 sourcefile~sourcery_oracle_m.f90->sourcefile~sourcery_object_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code submodule ( sourcery_oracle_m ) sourcery_oracle_s !! define procedures corresponding to the interface bodies in oracle_m implicit none contains module procedure within_tolerance class ( oracle_t ), allocatable :: error error = self - reference in_tolerance = ( error % norm () <= tolerance ) end procedure end submodule sourcery_oracle_s","tags":"","loc":"sourcefile/sourcery_oracle_s.f90.html"},{"title":"sourcery_file_s.f90 – ","text":"This file depends on sourcefile~~sourcery_file_s.f90~~EfferentGraph sourcefile~sourcery_file_s.f90 sourcery_file_s.f90 sourcefile~sourcery_file_m.f90 sourcery_file_m.f90 sourcefile~sourcery_file_s.f90->sourcefile~sourcery_file_m.f90 sourcefile~sourcery_string_m.f90 sourcery_string_m.f90 sourcefile~sourcery_file_m.f90->sourcefile~sourcery_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code submodule ( sourcery_file_m ) sourcery_file_s use iso_fortran_env , only : iostat_end , iostat_eor , output_unit use assert_m , only : assert implicit none contains module procedure construct file_object % lines_ = lines end procedure module procedure write_lines integer file_unit , io_status , l call assert ( allocated ( self % lines_ ), \"file_t%write_lines: allocated(self%lines_)\" ) if ( present ( file_name )) then open ( newunit = file_unit , file = file_name % string (), form = 'formatted' , status = 'unknown' , iostat = io_status , action = 'write' ) call assert ( io_status == 0 , \"write_lines: io_status==0 after 'open' statement\" , file_name % string ()) else file_unit = output_unit end if do l = 1 , size ( self % lines_ ) write ( file_unit , * ) self % lines_ ( l )% string () end do if ( present ( file_name )) close ( file_unit ) end procedure module procedure read_lines integer io_status , file_unit , line_num character ( len = :), allocatable :: line integer , parameter :: max_message_length = 128 character ( len = max_message_length ) error_message integer , allocatable :: lengths (:) open ( newunit = file_unit , file = file_name % string (), form = 'formatted' , status = 'old' , iostat = io_status , action = 'read' ) call assert ( io_status == 0 , \"read_lines: io_status==0 after 'open' statement\" , file_name % string ()) lengths = line_lengths ( file_unit ) associate ( num_lines => size ( lengths )) allocate ( file_object % lines_ ( num_lines )) do line_num = 1 , num_lines allocate ( character ( len = lengths ( line_num )) :: line ) read ( file_unit , '(a)' , iostat = io_status , iomsg = error_message ) line call assert ( io_status == 0 , \"read_lines: io_status==0 after line read\" , error_message ) file_object % lines_ ( line_num ) = string_t ( line ) deallocate ( line ) end do end associate close ( file_unit ) contains function line_count ( file_unit ) result ( num_lines ) integer , intent ( in ) :: file_unit integer num_lines rewind ( file_unit ) num_lines = 0 do read ( file_unit , * , iostat = io_status ) if ( io_status == iostat_end ) exit num_lines = num_lines + 1 end do rewind ( file_unit ) end function function line_lengths ( file_unit ) result ( lengths ) integer , intent ( in ) :: file_unit integer , allocatable :: lengths (:) integer io_status character ( len = 1 ) c associate ( num_lines => line_count ( file_unit )) allocate ( lengths ( num_lines ), source = 0 ) rewind ( file_unit ) do line_num = 1 , num_lines do read ( file_unit , '(a)' , advance = 'no' , iostat = io_status , iomsg = error_message ) c if ( io_status == iostat_eor . or . io_status == iostat_end ) exit lengths ( line_num ) = lengths ( line_num ) + 1 end do end do rewind ( file_unit ) end associate end function end procedure module procedure lines my_lines = self % lines_ end procedure end submodule sourcery_file_s","tags":"","loc":"sourcefile/sourcery_file_s.f90.html"},{"title":"sourcery_test_result_s.f90 – ","text":"This file depends on sourcefile~~sourcery_test_result_s.f90~~EfferentGraph sourcefile~sourcery_test_result_s.f90 sourcery_test_result_s.f90 sourcefile~sourcery_test_result_m.f90 sourcery_test_result_m.f90 sourcefile~sourcery_test_result_s.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_user_defined_collectives_m.f90 sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_test_result_s.f90->sourcefile~sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_string_m.f90 sourcery_string_m.f90 sourcefile~sourcery_test_result_m.f90->sourcefile~sourcery_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code submodule ( sourcery_test_result_m ) sourcery_test_result_s use sourcery_user_defined_collectives_m , only : co_all implicit none contains module procedure construct_from_character test_result % description_ = description test_result % passed_ = passed end procedure module procedure construct_from_string test_result % description_ = description test_result % passed_ = passed end procedure module procedure characterize characterization = trim ( merge ( \"passes on \" , \"FAILS on  \" , self % passed_ )) // \" \" // trim ( self % description_ % string ()) // \".\" end procedure module procedure passed test_passed = self % passed_ call co_all ( test_passed ) end procedure module procedure description_contains substring_found = index ( self % description_ % string (), substring % string ()) /= 0 end procedure end submodule sourcery_test_result_s","tags":"","loc":"sourcefile/sourcery_test_result_s.f90.html"},{"title":"sourcery_data_partition_m.f90 – ","text":"This file depends on sourcefile~~sourcery_data_partition_m.f90~~EfferentGraph sourcefile~sourcery_data_partition_m.f90 sourcery_data_partition_m.f90 sourcefile~sourcery_bin_m.f90 sourcery_bin_m.f90 sourcefile~sourcery_data_partition_m.f90->sourcefile~sourcery_bin_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~sourcery_data_partition_m.f90~~AfferentGraph sourcefile~sourcery_data_partition_m.f90 sourcery_data_partition_m.f90 sourcefile~sourcery_data_partition_s.f90 sourcery_data_partition_s.f90 sourcefile~sourcery_data_partition_s.f90->sourcefile~sourcery_data_partition_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_data_partition_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module sourcery_data_partition_m !! distribute data identification numbers across images such that the number of !! items differs by at most 1 between any two images. use iso_fortran_env , only : real32 , real64 use sourcery_bin_m , only : bin_t implicit none private public :: data_partition_t type data_partition_t !! encapsulate a description of the data subset the executing image owns private type ( bin_t ), allocatable :: bin (:) contains procedure :: define_partitions procedure :: first procedure :: last procedure , private :: gather_real32_2D_array , gather_real64_2D_array , gather_real32_1D_array , gather_real64_1D_array generic :: gather => gather_real32_2D_array , gather_real64_2D_array , gather_real32_1D_array , gather_real64_1D_array end type interface data_partition_t pure module function construct ( cardinality ) result ( data_partition ) implicit none type ( data_partition_t ) data_partition integer , intent ( in ) :: cardinality end function end interface interface pure module subroutine define_partitions ( self , cardinality ) !! define the range of data identification numbers owned by the executing image implicit none class ( data_partition_t ), intent ( inout ) :: self integer , intent ( in ) :: cardinality end subroutine pure module function first ( self , image_number ) result ( first_index ) !! the result is the first identification number owned by the executing image implicit none class ( data_partition_t ), intent ( in ) :: self integer , intent ( in ), optional :: image_number integer first_index end function pure module function last ( self , image_number ) result ( last_index ) !! the result is the last identification number owned by the executing image implicit none class ( data_partition_t ), intent ( in ) :: self integer , intent ( in ), optional :: image_number integer last_index end function !! Gathers are inherently expensive and are best used either !! 1. Near the beginning/end of execution to amortize costs across an entire run or !! 2. Temporarily while developing/debugging code. module subroutine gather_real32_1D_array ( self , a , result_image , dim ) !! Gather the elements of an 1D array distributed along dimension dim onto result_image implicit none class ( data_partition_t ), intent ( in ) :: self real ( real32 ), intent ( inout ) :: a (:) integer , intent ( in ), optional :: result_image integer , intent ( in ), optional :: dim end subroutine module subroutine gather_real64_1D_array ( self , a , result_image , dim ) !! Gather the elements of an 1D array distributed along dimension dim onto result_image implicit none class ( data_partition_t ), intent ( in ) :: self real ( real64 ), intent ( inout ) :: a (:) integer , intent ( in ), optional :: result_image integer , intent ( in ), optional :: dim end subroutine module subroutine gather_real32_2D_array ( self , a , result_image , dim ) !! Gather the elements of an 2D array distributed along dimension dim onto result_image implicit none class ( data_partition_t ), intent ( in ) :: self real ( real32 ), intent ( inout ) :: a (:,:) integer , intent ( in ), optional :: result_image integer , intent ( in ), optional :: dim end subroutine module subroutine gather_real64_2D_array ( self , a , result_image , dim ) !! Gather the elements of an 2D array distributed along dimension dim onto result_image implicit none class ( data_partition_t ), intent ( in ) :: self real ( real64 ), intent ( inout ) :: a (:,:) integer , intent ( in ), optional :: result_image integer , intent ( in ), optional :: dim end subroutine end interface end module sourcery_data_partition_m","tags":"","loc":"sourcefile/sourcery_data_partition_m.f90.html"},{"title":"sourcery_formats_s.F90 – ","text":"This file depends on sourcefile~~sourcery_formats_s.f90~~EfferentGraph sourcefile~sourcery_formats_s.f90 sourcery_formats_s.F90 sourcefile~sourcery_formats_m.f90 sourcery_formats_m.F90 sourcefile~sourcery_formats_s.f90->sourcefile~sourcery_formats_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code submodule ( sourcery_formats_m ) sourcery_formats_s !! Construct separated-value formats implicit none contains #ifndef _CRAYFTN module procedure separated_values character ( len =* ), parameter :: prefix = \"(*(G0,:,'\" character ( len =* ), parameter :: suffix = \"'))\" character ( len =* ), parameter :: complex_prefix = \"(*('(',G0,',',G0,')',:,'\" select rank ( mold ) rank ( 1 ) select type ( mold ) type is ( complex ) format_string = complex_prefix // separator // suffix type is ( real ) format_string = prefix // separator // suffix type is ( integer ) format_string = prefix // separator // suffix type is ( character ( len =* )) format_string = prefix // separator // suffix class default error stop \"format_s separated_values: unsupported type\" end select rank default error stop \"formats_s separated_values: unsupported rank\" end select end procedure #else module procedure separated_values_1D character ( len =* ), parameter :: prefix = \"(*(G0,:,'\" character ( len =* ), parameter :: suffix = \"'))\" character ( len =* ), parameter :: complex_prefix = \"(*('(',G0,',',G0,')',:,'\" select type ( mold ) type is ( complex ) format_string = complex_prefix // separator // suffix type is ( real ) format_string = prefix // separator // suffix type is ( integer ) format_string = prefix // separator // suffix type is ( character ( len =* )) format_string = prefix // separator // suffix class default error stop \"format_s separated_values_1D: unsupported type\" end select end procedure #endif end submodule sourcery_formats_s","tags":"","loc":"sourcefile/sourcery_formats_s.f90.html"},{"title":"sourcery_object_m.f90 – ","text":"Files dependent on this one sourcefile~~sourcery_object_m.f90~~AfferentGraph sourcefile~sourcery_object_m.f90 sourcery_object_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_object_m.f90 sourcefile~sourcery_oracle_m.f90 sourcery_oracle_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_oracle_m.f90 sourcefile~sourcery_object_s.f90 sourcery_object_s.f90 sourcefile~sourcery_object_s.f90->sourcefile~sourcery_object_m.f90 sourcefile~sourcery_oracle_m.f90->sourcefile~sourcery_object_m.f90 sourcefile~sourcery_oracle_s.f90 sourcery_oracle_s.f90 sourcefile~sourcery_oracle_s.f90->sourcefile~sourcery_oracle_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! ### Copyright notice ! !     ``` !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 !     ``` module sourcery_object_m implicit none private public :: object_t type , abstract :: object_t !! author: Damian Rouson, GSE LLC !! category: Morfeus-FD !! summary: Abstract type to ensure all objects extending it implement the required methods !! !! Define an abstract parent type to ensure basic functionality expected to be provided by all non-abstract types. !! Each non-abstract type provides the functionality by extending self type and implementing its deferred binding(s).  This !! type resembles java's Object class in the sense that it is intended to be the ultimate ancestor of every other type. private logical :: defined = . false . !! Default initialization indicates not yet user-defined contains procedure :: mark_as_defined procedure :: user_defined procedure ( write_interface ), deferred :: write_formatted generic :: write ( formatted ) => write_formatted end type interface pure module subroutine mark_as_defined ( self ) !! Mark the object as user-defined implicit none class ( object_t ), intent ( inout ) :: self end subroutine pure module function user_defined ( self ) result ( is_defined ) !! Return a boolean result indicating whether self object has been initialized since its declaration implicit none class ( object_t ), intent ( in ) :: self logical :: is_defined end function end interface abstract interface subroutine write_interface ( self , unit , iotype , v_list , iostat , iomsg ) import object_t implicit none class ( object_t ), intent ( in ) :: self integer , intent ( in ) :: unit character ( * ), intent ( in ) :: iotype integer , intent ( in ) :: v_list (:) integer , intent ( out ) :: iostat character ( * ), intent ( inout ) :: iomsg end subroutine end interface end module sourcery_object_m","tags":"","loc":"sourcefile/sourcery_object_m.f90.html"},{"title":"sourcery_bin_s.f90 – ","text":"This file depends on sourcefile~~sourcery_bin_s.f90~~EfferentGraph sourcefile~sourcery_bin_s.f90 sourcery_bin_s.f90 sourcefile~sourcery_bin_m.f90 sourcery_bin_m.f90 sourcefile~sourcery_bin_s.f90->sourcefile~sourcery_bin_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code submodule ( sourcery_bin_m ) sourcery_bin_s use assert_m , only : assert , intrinsic_array_t implicit none contains module procedure construct call assert ( num_items >= num_bins , \"bin_s(construct): num_items>=num_bins\" , intrinsic_array_t ([ num_items , num_bins ])) associate ( remainder => mod ( num_items , num_bins ), items_per_bin => num_items / num_bins ) if ( bin_number <= remainder ) then bin % first_ = 1 + ( bin_number - 1 ) * ( items_per_bin + 1 ) bin % last_ = bin_number * ( items_per_bin + 1 ) else bin % first_ = 1 + ( remainder - 1 ) * ( items_per_bin + 1 ) + 1 + ( bin_number - remainder ) * items_per_bin bin % last_ = remainder * ( items_per_bin + 1 ) + ( bin_number - remainder ) * items_per_bin end if end associate end procedure module procedure first first_item_number = self % first_ end procedure module procedure last last_item_number = self % last_ end procedure end submodule sourcery_bin_s","tags":"","loc":"sourcefile/sourcery_bin_s.f90.html"},{"title":"sourcery_command_line_m.f90 – ","text":"Files dependent on this one sourcefile~~sourcery_command_line_m.f90~~AfferentGraph sourcefile~sourcery_command_line_m.f90 sourcery_command_line_m.f90 sourcefile~sourcery_command_line_s.f90 sourcery_command_line_s.f90 sourcefile~sourcery_command_line_s.f90->sourcefile~sourcery_command_line_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_command_line_m.f90 sourcefile~sourcery_test_s.f90 sourcery_test_s.F90 sourcefile~sourcery_test_s.f90->sourcefile~sourcery_command_line_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module sourcery_command_line_m !! return command line argument information implicit none private public :: command_line_t type command_line_t contains procedure , nopass :: argument_present procedure , nopass :: flag_value end type interface module function argument_present ( acceptable_argument ) result ( found ) implicit none !! result is .true. only if a command-line argument matches an element of this function's argument character ( len =* ), intent ( in ) :: acceptable_argument (:) !! sample list: [character(len=len(<longest_argument>)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"] !! where dashes support Linux/macOS, slashes support Windows, and <longest_argument> must be replaced !! by the longest list element (\"--benchmark\" above) logical found end function module function flag_value ( flag ) !! result is the value passed adjacent to a command-line flag implicit none character ( len =* ), intent ( in ) :: flag character ( len = :), allocatable :: flag_value end function end interface end module","tags":"","loc":"sourcefile/sourcery_command_line_m.f90.html"},{"title":"sourcery_test_s.F90 – ","text":"This file depends on sourcefile~~sourcery_test_s.f90~~EfferentGraph sourcefile~sourcery_test_s.f90 sourcery_test_s.F90 sourcefile~sourcery_command_line_m.f90 sourcery_command_line_m.f90 sourcefile~sourcery_test_s.f90->sourcefile~sourcery_command_line_m.f90 sourcefile~sourcery_test_m.f90 sourcery_test_m.f90 sourcefile~sourcery_test_s.f90->sourcefile~sourcery_test_m.f90 sourcefile~sourcery_user_defined_collectives_m.f90 sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_test_s.f90->sourcefile~sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_test_result_m.f90 sourcery_test_result_m.f90 sourcefile~sourcery_test_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_string_m.f90 sourcery_string_m.f90 sourcefile~sourcery_test_result_m.f90->sourcefile~sourcery_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code submodule ( sourcery_test_m ) sourcery_test_s use sourcery_user_defined_collectives_m , only : co_all use sourcery_command_line_m , only : command_line_t implicit none contains module procedure report associate ( me => this_image ()) if ( me == 1 ) then first_report : & if (. not . allocated ( test_description_substring )) then block type ( command_line_t ) command_line test_description_substring = command_line % flag_value ( \"--contains\" ) end block if ( len ( test_description_substring ) == 0 ) then print * , \"Running all tests.\" print * , \"(Add '-- --contains <string>' to run only tests with subjects or descriptions containing the specified string.)\" else print * , \"Running only tests with subjects or descriptions containing '\" , test_description_substring , \"'.\" end if end if first_report print * , new_line ( 'a' ), test % subject () end if call co_broadcast ( test_description_substring , source_image = 1 ) #ifndef _CRAYFTN associate ( test_results => test % results ()) associate ( num_tests => size ( test_results )) tests = tests + num_tests if ( me == 1 ) then block integer i do i = 1 , num_tests if ( me == 1 ) print * , \"   \" , test_results ( i )% characterize () end do end block end if block logical , allocatable :: passing_tests (:) passing_tests = test_results % passed () call co_all ( passing_tests ) associate ( num_passes => count ( passing_tests )) if ( me == 1 ) print '(a,2(i0,a))' , \" \" , num_passes , \" of \" , num_tests , \" tests pass.\" passes = passes + num_passes end associate end block end associate end associate #else block logical , allocatable :: passing_tests (:) type ( test_result_t ), allocatable :: test_results (:) integer i test_results = test % results () associate ( num_tests => size ( test_results )) tests = tests + num_tests if ( me == 1 ) then do i = 1 , num_tests if ( me == 1 ) print * , \"   \" , test_results ( i )% characterize () end do end if passing_tests = test_results % passed () call co_all ( passing_tests ) associate ( num_passes => count ( passing_tests )) if ( me == 1 ) print '(a,2(i0,a))' , \" \" , num_passes , \" of \" , num_tests , \" tests pass.\" passes = passes + num_passes end associate end associate end block #endif end associate end procedure end submodule sourcery_test_s","tags":"","loc":"sourcefile/sourcery_test_s.f90.html"},{"title":"sourcery_string_s.f90 – ","text":"This file depends on sourcefile~~sourcery_string_s.f90~~EfferentGraph sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 sourcefile~sourcery_string_m.f90 sourcery_string_m.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_bin_m.f90 sourcery_bin_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_bin_m.f90 sourcefile~sourcery_co_object_m.f90 sourcery_co_object_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_co_object_m.f90 sourcefile~sourcery_command_line_m.f90 sourcery_command_line_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_command_line_m.f90 sourcefile~sourcery_data_partition_m.f90 sourcery_data_partition_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_data_partition_m.f90 sourcefile~sourcery_file_m.f90 sourcery_file_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_file_m.f90 sourcefile~sourcery_formats_m.f90 sourcery_formats_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_formats_m.f90 sourcefile~sourcery_object_m.f90 sourcery_object_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_object_m.f90 sourcefile~sourcery_oracle_m.f90 sourcery_oracle_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_oracle_m.f90 sourcefile~sourcery_test_description_m.f90 sourcery_test_description_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_description_m.f90 sourcefile~sourcery_test_m.f90 sourcery_test_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_m.f90 sourcefile~sourcery_test_result_m.f90 sourcery_test_result_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_units_m.f90 sourcery_units_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_units_m.f90 sourcefile~sourcery_user_defined_collectives_m.f90 sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_vector_test_description_m.f90 sourcery_vector_test_description_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_vector_test_description_m.f90 sourcefile~sourcery_data_partition_m.f90->sourcefile~sourcery_bin_m.f90 sourcefile~sourcery_file_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_oracle_m.f90->sourcefile~sourcery_object_m.f90 sourcefile~sourcery_test_description_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_test_description_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_test_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_test_result_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_vector_test_description_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_vector_test_description_m.f90->sourcefile~sourcery_test_result_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code submodule ( sourcery_string_m ) sourcery_string_s use assert_m , only : assert use sourcery_m , only : csv implicit none contains module procedure construct new_string % string_ = string end procedure module procedure as_character raw_string = self % string_ end procedure module procedure is_allocated string_allocated = allocated ( self % string_ ) end procedure module procedure from_default_integer integer , parameter :: sign_width = 1 , digits_width = range ( i ) + 1 character ( len = digits_width + sign_width ) characters write ( characters , '(i0)' ) i string = string_t ( characters ) end procedure module procedure from_real character ( len = 100 ) characters write ( characters , '(g0)' ) x string = string_t ( characters ) end procedure module procedure concatenate_elements integer s concatenated_strings = \"\" do s = 1 , size ( strings ) concatenated_strings = concatenated_strings // strings ( s )% string () end do end procedure module procedure array_of_strings character ( len = :), allocatable :: remainder , next_string integer next_delimiter , string_end remainder = trim ( adjustl ( delimited_strings )) allocate ( strings_array ( 0 )) do next_delimiter = index ( remainder , delimiter ) string_end = merge ( len ( remainder ), next_delimiter - 1 , next_delimiter == 0 ) next_string = trim ( adjustl ( remainder (: string_end ))) if ( len ( next_string ) == 0 ) exit strings_array = [ strings_array , string_t ( next_string )] if ( next_delimiter == 0 ) then remainder = \"\" else remainder = trim ( adjustl ( remainder ( next_delimiter + 1 :))) end if end do end procedure module procedure get_json_key character ( len = :), allocatable :: raw_line raw_line = self % string () associate ( opening_key_quotes => index ( raw_line , '\"' ), separator => index ( raw_line , ':' )) associate ( closing_key_quotes => opening_key_quotes + index ( raw_line ( opening_key_quotes + 1 :), '\"' )) unquoted_key = string_t ( trim ( raw_line ( opening_key_quotes + 1 : closing_key_quotes - 1 ))) end associate end associate end procedure module procedure file_extension character ( len = :), allocatable :: name_ name_ = trim ( adjustl ( self % string ())) associate ( dot_location => index ( name_ , '.' , back = . true .) ) if ( dot_location < len ( name_ )) then extension = trim ( adjustl ( name_ ( dot_location + 1 :))) else extension = \"\" end if end associate end procedure module procedure base_name character ( len = :), allocatable :: name_ name_ = self % string () associate ( dot_location => index ( name_ , '.' , back = . true .) ) if ( dot_location < len ( name_ )) then base = trim ( adjustl ( name_ ( 1 : dot_location - 1 ))) else base = \"\" end if end associate end procedure module procedure get_json_real character ( len = :), allocatable :: raw_line , string_value call assert ( key == self % get_json_key (), \"string_s(get_json_real): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if read ( string_value , fmt =* ) value_ end associate end associate end procedure module procedure get_json_string character ( len = :), allocatable :: raw_line call assert ( key == self % get_json_key (), \"key==self%get_string_json()\" , key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( opening_value_quotes => index ( text_after_colon , '\"' )) associate ( closing_value_quotes => opening_value_quotes + index ( text_after_colon ( opening_value_quotes + 1 :), '\"' )) if ( any ([ opening_value_quotes , closing_value_quotes ] == 0 )) then value_ = string_t ( trim ( adjustl (( text_after_colon )))) else value_ = string_t ( text_after_colon ( opening_value_quotes + 1 : closing_value_quotes - 1 )) end if end associate end associate end associate end procedure module procedure get_json_logical character ( len = :), allocatable :: raw_line , string_value call assert ( key == self % get_json_key (), \"string_s(get_json_logical): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if call assert ( string_value == \"true\" . or . string_value == \"false\" , & 'string_s(get_json_logical): string_value==\"true\" .or. string_value=\"false\"' , string_value ) value_ = string_value == \"true\" end associate end associate end procedure module procedure get_json_integer character ( len = :), allocatable :: raw_line , string_value call assert ( key == self % get_json_key (), \"string_s(get_json_logical): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( text_after_colon => raw_line ( index ( raw_line , ':' ) + 1 :)) associate ( trailing_comma => index ( text_after_colon , ',' )) if ( trailing_comma == 0 ) then string_value = trim ( adjustl (( text_after_colon ))) else string_value = trim ( adjustl (( text_after_colon (: trailing_comma - 1 )))) end if read ( string_value , fmt =* ) value_ end associate end associate end procedure module procedure get_json_integer_array value_ = int ( self % get_json_real_array ( key , mold = [ 0. ])) end procedure module procedure get_json_real_array character ( len = :), allocatable :: raw_line real , allocatable :: real_array (:) integer i call assert ( key == self % get_json_key (), \"string_s(get_json_{real,integer}_array): key==self%get_json_key()\" , key ) raw_line = self % string () associate ( colon => index ( raw_line , \":\" )) associate ( opening_bracket => colon + index ( raw_line ( colon + 1 :), \"[\" )) associate ( closing_bracket => opening_bracket + index ( raw_line ( opening_bracket + 1 :), \"]\" )) associate ( commas => count ( \",\" == [( raw_line ( i : i ), i = opening_bracket + 1 , closing_bracket - 1 )])) associate ( num_inputs => commas + 1 ) allocate ( real_array ( num_inputs )) read ( raw_line ( opening_bracket + 1 : closing_bracket - 1 ), fmt =* ) real_array value_ = real_array end associate end associate end associate end associate end associate end procedure module procedure string_t_eq_string_t lhs_eq_rhs = lhs % string () == rhs % string () end procedure module procedure string_t_eq_character lhs_eq_rhs = lhs % string () == rhs end procedure module procedure character_eq_string_t lhs_eq_rhs = lhs == rhs % string () end procedure module procedure string_t_ne_string_t lhs_ne_rhs = lhs % string () /= rhs % string () end procedure module procedure string_t_ne_character lhs_ne_rhs = lhs % string () /= rhs end procedure module procedure character_ne_string_t lhs_ne_rhs = lhs /= rhs % string () end procedure module procedure assign_string_t_to_character lhs = rhs % string () end procedure module procedure assign_character_to_string_t lhs % string_ = rhs end procedure module procedure string_t_cat_string_t lhs_cat_rhs = string_t ( lhs % string_ // rhs % string_ ) end procedure module procedure string_t_cat_character lhs_cat_rhs = string_t ( lhs % string_ // rhs ) end procedure module procedure character_cat_string_t lhs_cat_rhs = string_t ( lhs // rhs % string_ ) end procedure end submodule sourcery_string_s","tags":"","loc":"sourcefile/sourcery_string_s.f90.html"},{"title":"sourcery_user_defined_collectives_m.f90 – ","text":"Files dependent on this one sourcefile~~sourcery_user_defined_collectives_m.f90~~AfferentGraph sourcefile~sourcery_user_defined_collectives_m.f90 sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_test_result_s.f90 sourcery_test_result_s.f90 sourcefile~sourcery_test_result_s.f90->sourcefile~sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_test_s.f90 sourcery_test_s.F90 sourcefile~sourcery_test_s.f90->sourcefile~sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_user_defined_collectives_s.f90 sourcery_user_defined_collectives_s.f90 sourcefile~sourcery_user_defined_collectives_s.f90->sourcefile~sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! module sourcery_user_defined_collectives_m !! author: Damian Rouson !! !! This module contains user-defined collective subroutines. implicit none interface impure elemental module subroutine co_all ( boolean ) !! If any image in a team calls this subroutine, then every image in the !! the same team must call this subroutine.  This subroutine sets the !! \"boolean\" argument .true. if it is true in all participating images !! upon entry and .false. otherwise. implicit none logical , intent ( inout ) :: boolean end subroutine end interface end module sourcery_user_defined_collectives_m","tags":"","loc":"sourcefile/sourcery_user_defined_collectives_m.f90.html"},{"title":"sourcery_co_object_implementation.f90 – ","text":"This file depends on sourcefile~~sourcery_co_object_implementation.f90~~EfferentGraph sourcefile~sourcery_co_object_implementation.f90 sourcery_co_object_implementation.f90 sourcefile~sourcery_co_object_m.f90 sourcery_co_object_m.f90 sourcefile~sourcery_co_object_implementation.f90->sourcefile~sourcery_co_object_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! submodule ( sourcery_co_object_m ) sourcery_co_object_s implicit none contains module procedure mark_as_defined self % defined = . true . end procedure module procedure user_defined is_defined = self % defined end procedure end submodule","tags":"","loc":"sourcefile/sourcery_co_object_implementation.f90.html"},{"title":"sourcery_command_line_s.f90 – ","text":"This file depends on sourcefile~~sourcery_command_line_s.f90~~EfferentGraph sourcefile~sourcery_command_line_s.f90 sourcery_command_line_s.f90 sourcefile~sourcery_command_line_m.f90 sourcery_command_line_m.f90 sourcefile~sourcery_command_line_s.f90->sourcefile~sourcery_command_line_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code submodule ( sourcery_command_line_m ) sourcery_command_line_s implicit none contains module procedure argument_present !! list of acceptable arguments !! sample list: [character(len=len(longest_argument)):: \"--benchmark\", \"-b\", \"/benchmark\", \"/b\"] !! where dashes support Linux/macOS and slashes support Windows integer :: i , argnum , arglen !! loop counter, argument position, argument length character ( len = 32 ) arg !! argument position !! acceptable argument lengths (used to preclude extraneous trailing characters) associate ( acceptable_length => [( len ( trim ( acceptable_argument ( i ))), i = 1 , size ( acceptable_argument ))]) found = . false . do argnum = 1 , command_argument_count () call get_command_argument ( argnum , arg , arglen ) if ( any ( & [( arg == acceptable_argument ( i ) . and . arglen == acceptable_length ( i ), i = 1 , size ( acceptable_argument ))] & )) then found = . true . end if end do end associate end procedure module procedure flag_value integer argnum , arglen , flag_value_length character ( len = :), allocatable :: arg associate ( argcount => command_argument_count ()) if ( argcount == 0 ) then flag_value = \"\" else flag_search : & do argnum = 1 , argcount if ( allocated ( arg )) deallocate ( arg ) call get_command_argument ( argnum , length = arglen ) allocate ( character ( len = arglen ) :: arg ) call get_command_argument ( argnum , arg ) if ( arg == flag ) then call get_command_argument ( argnum + 1 , length = flag_value_length ) allocate ( character ( len = flag_value_length ) :: flag_value ) call get_command_argument ( argnum + 1 , flag_value ) exit flag_search end if end do flag_search end if end associate end procedure end submodule","tags":"","loc":"sourcefile/sourcery_command_line_s.f90.html"},{"title":"sourcery_user_defined_collectives_s.f90 – ","text":"This file depends on sourcefile~~sourcery_user_defined_collectives_s.f90~~EfferentGraph sourcefile~sourcery_user_defined_collectives_s.f90 sourcery_user_defined_collectives_s.f90 sourcefile~sourcery_user_defined_collectives_m.f90 sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_user_defined_collectives_s.f90->sourcefile~sourcery_user_defined_collectives_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! submodule ( sourcery_user_defined_collectives_m ) sourcery_user_defined_collectives_s implicit none contains module procedure co_all call co_reduce ( boolean , both ) contains pure function both ( lhs , rhs ) result ( lhs_and_rhs ) logical , intent ( in ) :: lhs , rhs logical lhs_and_rhs lhs_and_rhs = lhs . and . rhs end function end procedure end submodule sourcery_user_defined_collectives_s","tags":"","loc":"sourcefile/sourcery_user_defined_collectives_s.f90.html"},{"title":"sourcery_units_s.f90 – ","text":"This file depends on sourcefile~~sourcery_units_s.f90~~EfferentGraph sourcefile~sourcery_units_s.f90 sourcery_units_s.f90 sourcefile~sourcery_units_m.f90 sourcery_units_m.f90 sourcefile~sourcery_units_s.f90->sourcefile~sourcery_units_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! submodule ( sourcery_units_m ) sourcery_units_s use assert_m , only : assert implicit none contains module procedure set_units !! define units exponents this % exponents_ = exponents this % system = system end procedure module procedure get_system system_of_units = this % system end procedure module procedure get_units exponents = this % exponents_ end procedure module procedure assign_units lhs % exponents_ = rhs % exponents_ lhs % system = rhs % system end procedure module procedure is_dimensionless nondimensional = all ([ this % exponents_ == 0 ]) . and . this % system == dimensionless end procedure module procedure has_length_units length_units = this % exponents_ ( m ) == 1 . and . all ( this % exponents_ ([ kg , sec , K ]) == 0 ) end procedure module procedure has_mass_units mass_units = this % exponents_ ( kg ) == 1 . and . all ( this % exponents_ ([ m , sec , K ]) == 0 ) end procedure module procedure has_time_units time_units = this % exponents_ ( sec ) == 1 . and . all ( this % exponents_ ([ m , kg , K ]) == 0 ) end procedure module procedure has_temperature_units temperature_units = this % exponents_ ( K ) == 1 . and . all ( this % exponents_ ([ m , kg , sec ]) == 0 ) end procedure module procedure has_velocity_units velocity_units = all ( this % exponents_ ([ m , sec ]) == [ 1 , - 1 ]) . and . all ( this % exponents_ ([ kg , K ]) == 0 ) end procedure module procedure has_energy_units energy_units = all ( this % exponents_ ([ kg , m , sec ]) == [ 1 , 2 , - 2 ]) . and . this % exponents_ ( K ) == 0 end procedure module procedure has_density_units density_units = all ( this % exponents_ ([ kg , m ]) == [ 1 , - 3 ]) . and . all ( this % exponents_ ([ sec , K ]) == 0 ) end procedure module procedure has_specific_energy_units specific_energy_units = all ( this % exponents_ ([ m , sec ]) == [ 2 , - 2 ]) . and . all ( this % exponents_ ([ kg , K ]) == 0 ) end procedure module procedure has_stress_units stress_units = all ( this % exponents_ ([ kg , m , sec ]) == [ 1 , - 1 , - 2 ]) . and . this % exponents_ ( K ) == 0 end procedure module procedure has_power_units power_units = all ( this % exponents_ ([ kg , m , sec ]) == [ 1 , 2 , - 3 ]) . and . this % exponents_ ( K ) == 0 end procedure module procedure integer_power this_raised % system = this % system this_raised % exponents_ = exponent_ * this % exponents_ end procedure module procedure real_power call assert ( this % is_dimensionless (), & & \"units%real_power: an entity raised to a real power must be dimensionless\" ) !! Require dimensionless operand => result is default-initialized as dimensionless end procedure module procedure negate negative_this % exponents_ = this % exponents_ negative_this % system = this % system end procedure module procedure add !! Require consistent operand units associate ( preconditions => [ lhs % system == rhs % system , lhs % exponents_ == rhs % exponents_ ] ) call assert ( all ( preconditions ), \"units%add: consistent operands units\" ) end associate total % exponents_ = lhs % exponents_ total % system = lhs % system end procedure module procedure subtract !! Require consistent operand units associate ( preconditions => [ lhs % system == rhs % system , lhs % exponents_ == rhs % exponents_ ] ) call assert ( all ( preconditions ), \"units%subtract: consistent operand units\" ) end associate difference % exponents_ = lhs % exponents_ difference % system = lhs % system end procedure module procedure multiply call assert ( lhs % system == rhs % system , \"units%multiply: consistent operand units\" ) product_ % exponents_ = lhs % exponents_ + rhs % exponents_ product_ % system = lhs % system end procedure module procedure divide call assert ( numerator % system == denominator % system , \"units%divide: consistent operand units\" ) ratio % exponents_ = numerator % exponents_ - denominator % exponents_ ratio % system = merge ( numerator % system , dimensionless , any ( ratio % exponents_ /= 0 )) end procedure end submodule sourcery_units_s","tags":"","loc":"sourcefile/sourcery_units_s.f90.html"},{"title":"sourcery_array_functions_s.f90 – ","text":"This file depends on sourcefile~~sourcery_array_functions_s.f90~~EfferentGraph sourcefile~sourcery_array_functions_s.f90 sourcery_array_functions_s.f90 sourcefile~sourcery_array_functions_m.f90 sourcery_array_functions_m.f90 sourcefile~sourcery_array_functions_s.f90->sourcefile~sourcery_array_functions_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! submodule ( sourcery_array_functions_m ) sourcery_array_functions_s use assert_m , only : assert implicit none contains module procedure column_vectors integer i , j , k associate ( n => shape ( vector_field ) ) call assert ( size ( n ) == 4 , \"3D vector field input\" ) allocate ( array_of_3D_column_vectors ( n ( 4 ), product ( n ( 1 : 3 )) ) ) do concurrent ( i = 1 : n ( 1 ), j = 1 : n ( 2 ), k = 1 : n ( 3 ) ) associate ( id => ( k - 1 ) * PRODUCT ( n ( 1 : 2 )) + ( j - 1 ) * n ( 1 ) + i ) array_of_3D_column_vectors (:, id ) = vector_field ( i , j , k ,:) end associate end do end associate end procedure module procedure concatenate_columns !! Using reshape rather than manipulating array elements directly frees the compiler to decide the particular order of array !! element references that best exploits the given platform.  Alternatively, do concurrent could instead free the compiler !! to order element accesses however is best. Trade-off: reshape requires the creation of temporary array results but reshape !! is likely to have more mature compiler support than do concurrent.  If this code turns out to be a critical performance !! bottleneck, try replacing this implementation with element-by-element copying using do concurrent. associate ( rows => size ( a , 1 )) associate ( cols => size ( a , 2 ) + size ( b , 2 )) associate ( a_unrolled => reshape ( a ,[ size ( a )])) associate ( b_unrolled => reshape ( b ,[ size ( b )])) call assert ( rows == size ( b , 1 ), \"array_functions: compatible shapes\" ) concatenated = reshape ( [ a_unrolled , b_unrolled ],[ rows , cols ] ) end associate ; end associate ; end associate ; end associate end procedure module procedure concatenate_rows !! For simplicity, this implementation invokes concatenate_columns at the cost of transpose creating additional temporaries. !! If this code turns out to be a critical performance bottleneck, try replacing this implementation with element-by-element !! copying using do concurrent. concatenated = transpose ( concatenate_columns ( transpose ( a ), transpose ( b )) ) end procedure end submodule","tags":"","loc":"sourcefile/sourcery_array_functions_s.f90.html"},{"title":"sourcery_object_s.f90 – ","text":"This file depends on sourcefile~~sourcery_object_s.f90~~EfferentGraph sourcefile~sourcery_object_s.f90 sourcery_object_s.f90 sourcefile~sourcery_object_m.f90 sourcery_object_m.f90 sourcefile~sourcery_object_s.f90->sourcefile~sourcery_object_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! submodule ( sourcery_object_m ) sourcery_object_s implicit none contains module procedure mark_as_defined self % defined = . true . end procedure module procedure user_defined is_defined = self % defined end procedure end submodule","tags":"","loc":"sourcefile/sourcery_object_s.f90.html"},{"title":"sourcery_units_m.f90 – ","text":"Files dependent on this one sourcefile~~sourcery_units_m.f90~~AfferentGraph sourcefile~sourcery_units_m.f90 sourcery_units_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_units_m.f90 sourcefile~sourcery_units_s.f90 sourcery_units_s.f90 sourcefile~sourcery_units_s.f90->sourcefile~sourcery_units_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code ! !     (c) 2019-2020 Guide Star Engineering, LLC !     This Software was developed for the US Nuclear Regulatory Commission (US NRC) under contract !     \"Multi-Dimensional Physics Implementation into Fuel Analysis under Steady-state and Transients (FAST)\", !     contract # NRC-HQ-60-17-C-0007 ! module sourcery_units_m !! author: Damian Rouson !! date: 9/9/2019 !! !! Define SI and British units of measurement and associated arithmetic operators implicit none private public :: units public :: K , m , kg , sec public :: R , ft , lbm public :: dimensionless , SI , British public :: num_fundamental public :: units_system_names public :: SI_units_names , British_units_names enum , bind ( C ) !! Enumerate the fundamental units for dimensional units quantities !! (meters, kilograms, seconds, and degrees Kelvin) enumerator :: K = 1 , m , kg , sec enumerator :: R = 1 , ft , lbm enumerator :: dimensionless = 0 , SI , British end enum integer , parameter :: num_fundamental = 4 , num_systems = 2 character ( len =* ), parameter :: units_system_names ( num_systems ) = [ character ( len = len ( \"British\" )) :: \"SI\" , \"British\" ] character ( len =* ), parameter :: SI_units_names ( num_fundamental ) = [ character ( len = len ( \"sec\" )) :: \"K\" , \"m\" , \"kg\" , \"sec\" ] character ( len =* ), parameter :: British_units_names ( num_fundamental ) = [ character ( len = len ( \"sec\" )) :: \"R\" , \"ft\" , \"lbm\" , \"sec\" ] type units !! Morfeus universal base type for all units private integer :: exponents_ ( num_fundamental ) = dimensionless !! Store the exponents for fundamental units integer :: system = dimensionless !! Default to SI units character ( len = :), allocatable :: description contains procedure :: set_units procedure :: get_units procedure :: get_system procedure :: is_dimensionless procedure :: has_length_units procedure :: has_mass_units procedure :: has_time_units procedure :: has_temperature_units procedure :: has_velocity_units procedure :: has_energy_units procedure :: has_density_units procedure :: has_specific_energy_units procedure :: has_stress_units procedure :: has_power_units procedure :: add procedure :: multiply procedure :: divide procedure :: subtract , negate procedure :: integer_power procedure :: real_power procedure :: assign_units generic :: operator ( + ) => add generic :: operator ( * ) => multiply generic :: operator ( / ) => divide generic :: operator ( - ) => subtract , negate generic :: operator ( ** ) => integer_power , real_power generic :: assignment ( = ) => assign_units end type interface pure module subroutine set_units ( this , exponents , system ) !! define units implicit none class ( units ), intent ( inout ) :: this integer , intent ( in ) :: exponents ( num_fundamental ) integer , intent ( in ) :: system end subroutine pure module subroutine assign_units ( lhs , rhs ) !! copy units information implicit none class ( units ), intent ( inout ) :: lhs class ( units ), intent ( in ) :: rhs end subroutine impure elemental module function integer_power ( this , exponent_ ) result ( this_raised ) !! result has units of the opearand raised to the power \"exponent_\" implicit none class ( units ), intent ( in ) :: this integer , intent ( in ) :: exponent_ type ( units ) :: this_raised end function module function get_units ( this ) result ( exponents ) !! result holds the exponents of each unit in the argument (most useful when the actual argument is an expression) implicit none class ( units ), intent ( in ) :: this integer :: exponents ( num_fundamental ) end function impure elemental module function get_system ( this ) result ( system_of_units ) !! result is enumerated value designating units system implicit none class ( units ), intent ( in ) :: this integer :: system_of_units end function impure elemental module function real_power ( this , exponent_ ) result ( this_raised ) !! result is the units of the operand raised to the power \"exponent_\"; includes check that operand is dimensionless implicit none class ( units ), intent ( in ) :: this real , intent ( in ) :: exponent_ type ( units ) :: this_raised end function impure elemental module function add ( lhs , rhs ) result ( total ) !! result is the units of the sum of two dimensional quantities; includes operand consistency check implicit none class ( units ), intent ( in ) :: lhs , rhs type ( units ) :: total end function impure elemental module function subtract ( lhs , rhs ) result ( difference ) !! result is the units of the difference of two dimensional quantities; includes operand consistency check implicit none class ( units ), intent ( in ) :: lhs , rhs type ( units ) :: difference end function elemental module function negate ( this ) result ( negative_this ) !! result is the units of the negative of a dimensional quantities implicit none class ( units ), intent ( in ) :: this type ( units ) :: negative_this end function elemental module function multiply ( lhs , rhs ) result ( product_ ) !! result is the units of the product of two dimensional quantities; includes units-system consistency check implicit none class ( units ), intent ( in ) :: lhs , rhs type ( units ) :: product_ end function elemental module function divide ( numerator , denominator ) result ( ratio ) !! result is the units of the ratio of two dimensional quantities; includes units-sysetm consistency check implicit none class ( units ), intent ( in ) :: numerator , denominator type ( units ) :: ratio end function elemental module function is_dimensionless ( this ) result ( nondimensional ) !! Return true if all units exponents are zero; false otherwise. implicit none class ( units ), intent ( in ) :: this logical :: nondimensional end function elemental module function has_length_units ( this ) result ( length_units ) !! Return true if units match meters (m) implicit none class ( units ), intent ( in ) :: this logical :: length_units end function elemental module function has_mass_units ( this ) result ( mass_units ) !! Return true if units match kilograms (kg) implicit none class ( units ), intent ( in ) :: this logical :: mass_units end function elemental module function has_time_units ( this ) result ( time_units ) !! Return true if units match seconds (s) implicit none class ( units ), intent ( in ) :: this logical :: time_units end function elemental module function has_temperature_units ( this ) result ( temperature_units ) !! Return true if units match degrees Kelvin (K) implicit none class ( units ), intent ( in ) :: this logical :: temperature_units end function elemental module function has_velocity_units ( this ) result ( velocity_units ) !! Return true if units match meters/second&#94;2 (m/s&#94;2) implicit none class ( units ), intent ( in ) :: this logical :: velocity_units end function elemental module function has_energy_units ( this ) result ( energy_units ) !! Return true if units match joules (J) implicit none class ( units ), intent ( in ) :: this logical :: energy_units end function elemental module function has_density_units ( this ) result ( density_units ) !! Return true if units match kilograms (kg/m&#94;3) implicit none class ( units ), intent ( in ) :: this logical :: density_units end function elemental module function has_specific_energy_units ( this ) result ( specific_energy_units ) !! Return true if units match Joules per kilogram (J/kg) implicit none class ( units ), intent ( in ) :: this logical :: specific_energy_units end function elemental module function has_stress_units ( this ) result ( stress_units ) !! Return true if units match Newtons per square meter (N/m&#94;2) implicit none class ( units ), intent ( in ) :: this logical :: stress_units end function elemental module function has_power_units ( this ) result ( power_units ) !! Return true if units match Watts (W) implicit none class ( units ), intent ( in ) :: this logical :: power_units end function end interface end module","tags":"","loc":"sourcefile/sourcery_units_m.f90.html"},{"title":"sourcery_test_description_s.f90 – ","text":"This file depends on sourcefile~~sourcery_test_description_s.f90~~EfferentGraph sourcefile~sourcery_test_description_s.f90 sourcery_test_description_s.f90 sourcefile~sourcery_test_description_m.f90 sourcery_test_description_m.F90 sourcefile~sourcery_test_description_s.f90->sourcefile~sourcery_test_description_m.f90 sourcefile~sourcery_string_m.f90 sourcery_string_m.f90 sourcefile~sourcery_test_description_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_test_result_m.f90 sourcery_test_result_m.f90 sourcefile~sourcery_test_description_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_test_result_m.f90->sourcefile~sourcery_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code submodule ( sourcery_test_description_m ) sourcery_test_description_s implicit none contains module procedure construct_from_character test_description % description_ = description test_description % test_function_ => test_function end procedure module procedure construct_from_string_t test_description % description_ = description test_description % test_function_ => test_function end procedure module procedure run test_result = test_result_t ( self % description_ , self % test_function_ ()) end procedure module procedure contains_text match = index ( self % description_ % string (), substring % string ()) /= 0 end procedure module procedure equals lhs_eq_rhs = ( lhs % description_ == rhs % description_ ) . and . associated ( lhs % test_function_ , rhs % test_function_ ) end procedure end submodule sourcery_test_description_s","tags":"","loc":"sourcefile/sourcery_test_description_s.f90.html"},{"title":"sourcery_string_m.f90 – ","text":"Files dependent on this one sourcefile~~sourcery_string_m.f90~~AfferentGraph sourcefile~sourcery_string_m.f90 sourcery_string_m.f90 sourcefile~sourcery_file_m.f90 sourcery_file_m.f90 sourcefile~sourcery_file_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_file_m.f90 sourcefile~sourcery_test_description_m.f90 sourcery_test_description_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_description_m.f90 sourcefile~sourcery_test_result_m.f90 sourcery_test_result_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_vector_test_description_m.f90 sourcery_vector_test_description_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_vector_test_description_m.f90 sourcefile~sourcery_test_m.f90 sourcery_test_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 sourcefile~sourcery_test_description_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_test_description_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_test_result_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_vector_test_description_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_vector_test_description_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_file_s.f90 sourcery_file_s.f90 sourcefile~sourcery_file_s.f90->sourcefile~sourcery_file_m.f90 sourcefile~sourcery_test_description_s.f90 sourcery_test_description_s.f90 sourcefile~sourcery_test_description_s.f90->sourcefile~sourcery_test_description_m.f90 sourcefile~sourcery_test_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_test_result_s.f90 sourcery_test_result_s.f90 sourcefile~sourcery_test_result_s.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_test_s.f90 sourcery_test_s.F90 sourcefile~sourcery_test_s.f90->sourcefile~sourcery_test_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module sourcery_string_m use assert_m , only : characterizable_t implicit none private public :: string_t public :: array_of_strings public :: operator (. cat .) ! element-wise concatenation operator type , extends ( characterizable_t ) :: string_t private character ( len = :), allocatable :: string_ contains procedure :: as_character generic :: string => as_character procedure :: is_allocated procedure :: get_json_key procedure :: file_extension procedure :: base_name generic :: operator ( // ) => string_t_cat_string_t , string_t_cat_character , character_cat_string_t generic :: operator ( /= ) => string_t_ne_string_t , string_t_ne_character , character_ne_string_t generic :: operator ( == ) => string_t_eq_string_t , string_t_eq_character , character_eq_string_t generic :: assignment ( = ) => assign_string_t_to_character , assign_character_to_string_t generic :: get_json_value => get_json_integer_array , get_json_logical , get_json_integer , get_json_string , get_json_real , & get_json_real_array procedure , private :: get_json_integer_array , get_json_logical , get_json_integer , get_json_string , get_json_real , & get_json_real_array procedure , private :: string_t_ne_string_t , string_t_ne_character procedure , private :: string_t_eq_string_t , string_t_eq_character procedure , private :: assign_character_to_string_t procedure , private :: string_t_cat_string_t , string_t_cat_character procedure , private , pass ( rhs ) :: character_cat_string_t procedure , private , pass ( rhs ) :: character_ne_string_t procedure , private , pass ( rhs ) :: character_eq_string_t procedure , private , pass ( rhs ) :: assign_string_t_to_character end type interface string_t elemental module function construct ( string ) result ( new_string ) implicit none character ( len =* ), intent ( in ) :: string type ( string_t ) new_string end function elemental module function from_default_integer ( i ) result ( string ) implicit none integer , intent ( in ) :: i type ( string_t ) string end function elemental module function from_real ( x ) result ( string ) implicit none real , intent ( in ) :: x type ( string_t ) string end function end interface interface operator (. cat .) pure  module function concatenate_elements ( strings ) result ( concatenated_strings ) implicit none type ( string_t ), intent ( in ) :: strings (:) type ( string_t ) concatenated_strings end function end interface interface pure module function as_character ( self ) result ( raw_string ) implicit none class ( string_t ), intent ( in ) :: self character ( len = :), allocatable :: raw_string end function pure module function array_of_strings ( delimited_strings , delimiter ) result ( strings_array ) implicit none character ( len =* ), intent ( in ) :: delimited_strings , delimiter type ( string_t ), allocatable :: strings_array (:) end function elemental module function is_allocated ( self ) result ( string_allocated ) implicit none class ( string_t ), intent ( in ) :: self logical string_allocated end function elemental module function get_json_key ( self ) result ( unquoted_key ) implicit none class ( string_t ), intent ( in ) :: self type ( string_t ) unquoted_key end function elemental module function file_extension ( self ) result ( extension ) !! result contains all characters in file_name after the last dot (.) class ( string_t ), intent ( in ) :: self type ( string_t ) extension end function pure module function base_name ( self ) result ( base ) !! result contains all characters in file_name before the last dot (.) class ( string_t ), intent ( in ) :: self type ( string_t ) base end function pure module function get_json_real ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key real , intent ( in ) :: mold real value_ end function elemental module function get_json_string ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key , mold type ( string_t ) :: value_ end function pure module function get_json_integer ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key integer , intent ( in ) :: mold integer value_ end function elemental module function get_json_logical ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key logical , intent ( in ) :: mold logical value_ end function pure module function get_json_integer_array ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key integer , intent ( in ) :: mold (:) integer , allocatable :: value_ (:) end function pure module function get_json_real_array ( self , key , mold ) result ( value_ ) implicit none class ( string_t ), intent ( in ) :: self , key real , intent ( in ) :: mold (:) real , allocatable :: value_ (:) end function elemental module function string_t_eq_string_t ( lhs , rhs ) result ( lhs_eq_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs , rhs logical lhs_eq_rhs end function elemental module function string_t_eq_character ( lhs , rhs ) result ( lhs_eq_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs logical lhs_eq_rhs end function elemental module function character_eq_string_t ( lhs , rhs ) result ( lhs_eq_rhs ) implicit none class ( string_t ), intent ( in ) :: rhs character ( len =* ), intent ( in ) :: lhs logical lhs_eq_rhs end function elemental module function string_t_ne_string_t ( lhs , rhs ) result ( lhs_ne_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs , rhs logical lhs_ne_rhs end function elemental module function string_t_ne_character ( lhs , rhs ) result ( lhs_ne_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs logical lhs_ne_rhs end function elemental module function character_ne_string_t ( lhs , rhs ) result ( lhs_ne_rhs ) implicit none class ( string_t ), intent ( in ) :: rhs character ( len =* ), intent ( in ) :: lhs logical lhs_ne_rhs end function pure module function string_t_cat_string_t ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs , rhs type ( string_t ) lhs_cat_rhs end function pure module function string_t_cat_character ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none class ( string_t ), intent ( in ) :: lhs character ( len =* ), intent ( in ) :: rhs type ( string_t ) lhs_cat_rhs end function pure module function character_cat_string_t ( lhs , rhs ) result ( lhs_cat_rhs ) implicit none character ( len =* ), intent ( in ) :: lhs class ( string_t ), intent ( in ) :: rhs type ( string_t ) lhs_cat_rhs end function pure module subroutine assign_character_to_string_t ( lhs , rhs ) implicit none class ( string_t ), intent ( inout ) :: lhs character ( len =* ), intent ( in ) :: rhs end subroutine pure module subroutine assign_string_t_to_character ( lhs , rhs ) implicit none class ( string_t ), intent ( in ) :: rhs character ( len = :), intent ( out ), allocatable :: lhs end subroutine end interface end module sourcery_string_m","tags":"","loc":"sourcefile/sourcery_string_m.f90.html"},{"title":"sourcery_vector_test_description_m.f90 – ","text":"This file depends on sourcefile~~sourcery_vector_test_description_m.f90~~EfferentGraph sourcefile~sourcery_vector_test_description_m.f90 sourcery_vector_test_description_m.f90 sourcefile~sourcery_string_m.f90 sourcery_string_m.f90 sourcefile~sourcery_vector_test_description_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_test_result_m.f90 sourcery_test_result_m.f90 sourcefile~sourcery_vector_test_description_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_test_result_m.f90->sourcefile~sourcery_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~sourcery_vector_test_description_m.f90~~AfferentGraph sourcefile~sourcery_vector_test_description_m.f90 sourcery_vector_test_description_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_vector_test_description_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module sourcery_vector_test_description_m !! Define an abstraction for describing test intentions and array-valued test functions use sourcery_string_m , only : string_t use sourcery_test_result_m , only : test_result_t use assert_m , only : assert implicit none private public :: vector_test_description_t public :: vector_function_strategy_t abstract interface function vector_function_i () result ( passes ) implicit none logical , allocatable :: passes (:) end function end interface type , abstract :: vector_function_strategy_t contains procedure ( vector_function_i ), deferred , nopass :: vector_function end type type vector_test_description_t !! Encapsulate test descriptions and vector-valued test functions private type ( string_t ), allocatable :: description_vector_ (:) class ( vector_function_strategy_t ), allocatable :: vector_function_strategy_ contains procedure run procedure contains_text end type interface vector_test_description_t module function construct ( description_vector , vector_function_strategy ) result ( vector_test_description ) !! The result is a vector_test_description_t object with the components defined by the dummy arguments implicit none type ( string_t ), intent ( in ) :: description_vector (:) class ( vector_function_strategy_t ), intent ( in ) :: vector_function_strategy type ( vector_test_description_t ) vector_test_description end function end interface interface impure module function run ( self ) result ( test_results ) !! The result encapsulates the test description and test outcome implicit none class ( vector_test_description_t ), intent ( in ) :: self type ( test_result_t ), allocatable :: test_results (:) end function module function contains_text ( self , substring ) result ( match_vector ) !! The result is .true. if the test description includes the value of substring implicit none class ( vector_test_description_t ), intent ( in ) :: self character ( len =* ), intent ( in ) :: substring logical , allocatable :: match_vector (:) end function end interface contains module procedure contains_text integer i associate ( num_descriptions => size ( self % description_vector_ )) allocate ( match_vector ( num_descriptions )) do i = 1 , num_descriptions match_vector ( i ) = index ( self % description_vector_ ( i )% string (), substring ) /= 0 end do end associate end procedure module procedure construct vector_test_description % description_vector_ = description_vector vector_test_description % vector_function_strategy_ = vector_function_strategy end procedure module procedure run associate ( vector_result => self % vector_function_strategy_ % vector_function ()) call assert ( size ( self % description_vector_ ) == size ( vector_result ), \"sourcery_vector_test_description_s: size match\" ) test_results = test_result_t ( self % description_vector_ , vector_result ) end associate end procedure end module sourcery_vector_test_description_m","tags":"","loc":"sourcefile/sourcery_vector_test_description_m.f90.html"},{"title":"sourcery_test_description_m.F90 – ","text":"This file depends on sourcefile~~sourcery_test_description_m.f90~~EfferentGraph sourcefile~sourcery_test_description_m.f90 sourcery_test_description_m.F90 sourcefile~sourcery_string_m.f90 sourcery_string_m.f90 sourcefile~sourcery_test_description_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_test_result_m.f90 sourcery_test_result_m.f90 sourcefile~sourcery_test_description_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_test_result_m.f90->sourcefile~sourcery_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~sourcery_test_description_m.f90~~AfferentGraph sourcefile~sourcery_test_description_m.f90 sourcery_test_description_m.F90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_description_m.f90 sourcefile~sourcery_test_description_s.f90 sourcery_test_description_s.f90 sourcefile~sourcery_test_description_s.f90->sourcefile~sourcery_test_description_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module sourcery_test_description_m !! Define an abstraction for describing test intentions and test functions use sourcery_string_m , only : string_t use sourcery_test_result_m , only : test_result_t implicit none private public :: test_description_t public :: test_function_i abstract interface function test_function_i () result ( passes ) implicit none logical passes end function end interface type test_description_t !! Encapsulate test descriptions and test-functions private type ( string_t ) description_ procedure ( test_function_i ), pointer , nopass :: test_function_ => null () contains procedure run procedure contains_text generic :: operator ( == ) => equals procedure , private :: equals end type interface test_description_t module function construct_from_string_t ( description , test_function ) result ( test_description ) !! The result is a test_description_t object with the components defined by the dummy arguments implicit none type ( string_t ), intent ( in ) :: description procedure ( test_function_i ), intent ( in ), pointer :: test_function type ( test_description_t ) test_description end function module function construct_from_character ( description , test_function ) result ( test_description ) !! The result is a test_description_t object with the components defined by the dummy arguments implicit none character ( len =* ), intent ( in ) :: description procedure ( test_function_i ), intent ( in ), pointer :: test_function type ( test_description_t ) test_description end function end interface interface impure elemental module function run ( self ) result ( test_result ) !! The result encapsulates the test description and test outcome implicit none class ( test_description_t ), intent ( in ) :: self type ( test_result_t ) test_result end function impure elemental module function contains_text ( self , substring ) result ( match ) !! The result is .true. if the test description includes the value of substring implicit none class ( test_description_t ), intent ( in ) :: self type ( string_t ), intent ( in ) :: substring logical match end function #ifdef __INTEL_COMPILER impure & #endif elemental module function equals ( lhs , rhs ) result ( lhs_eq_rhs ) !! The result is .true. if the components of the lhs & rhs are equal implicit none class ( test_description_t ), intent ( in ) :: lhs , rhs logical lhs_eq_rhs end function end interface end module sourcery_test_description_m","tags":"","loc":"sourcefile/sourcery_test_description_m.f90.html"},{"title":"sourcery_m.F90 – ","text":"This file depends on sourcefile~~sourcery_m.f90~~EfferentGraph sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_bin_m.f90 sourcery_bin_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_bin_m.f90 sourcefile~sourcery_co_object_m.f90 sourcery_co_object_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_co_object_m.f90 sourcefile~sourcery_command_line_m.f90 sourcery_command_line_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_command_line_m.f90 sourcefile~sourcery_data_partition_m.f90 sourcery_data_partition_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_data_partition_m.f90 sourcefile~sourcery_file_m.f90 sourcery_file_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_file_m.f90 sourcefile~sourcery_formats_m.f90 sourcery_formats_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_formats_m.f90 sourcefile~sourcery_object_m.f90 sourcery_object_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_object_m.f90 sourcefile~sourcery_oracle_m.f90 sourcery_oracle_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_oracle_m.f90 sourcefile~sourcery_string_m.f90 sourcery_string_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_test_description_m.f90 sourcery_test_description_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_description_m.f90 sourcefile~sourcery_test_m.f90 sourcery_test_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_m.f90 sourcefile~sourcery_test_result_m.f90 sourcery_test_result_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_units_m.f90 sourcery_units_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_units_m.f90 sourcefile~sourcery_user_defined_collectives_m.f90 sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_user_defined_collectives_m.f90 sourcefile~sourcery_vector_test_description_m.f90 sourcery_vector_test_description_m.f90 sourcefile~sourcery_m.f90->sourcefile~sourcery_vector_test_description_m.f90 sourcefile~sourcery_data_partition_m.f90->sourcefile~sourcery_bin_m.f90 sourcefile~sourcery_file_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_oracle_m.f90->sourcefile~sourcery_object_m.f90 sourcefile~sourcery_test_description_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_test_description_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_test_m.f90->sourcefile~sourcery_test_result_m.f90 sourcefile~sourcery_test_result_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_vector_test_description_m.f90->sourcefile~sourcery_string_m.f90 sourcefile~sourcery_vector_test_description_m.f90->sourcefile~sourcery_test_result_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~sourcery_m.f90~~AfferentGraph sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module sourcery_m !! export all public entities from every other sourcery module use sourcery_command_line_m , only : command_line_t use sourcery_data_partition_m , only : data_partition_t use sourcery_bin_m , only : bin_t use sourcery_formats_m , only : csv , cscv , separated_values use sourcery_file_m , only : file_t use sourcery_string_m , only : string_t , operator (. cat .) use sourcery_test_m , only : test_t , test_description_substring use sourcery_test_description_m , only : test_description_t , test_function_i use sourcery_test_result_m , only : test_result_t use sourcery_vector_test_description_m , only : vector_test_description_t , vector_function_strategy_t use sourcery_user_defined_collectives_m , only : co_all !! legacy modules (likely to be removed in a future release): use sourcery_object_m , only : object_t use sourcery_co_object_m , only : co_object use sourcery_oracle_m , only : oracle_t use sourcery_units_m implicit none end module sourcery_m","tags":"","loc":"sourcefile/sourcery_m.f90.html"},{"title":"sourcery_file_m.f90 – ","text":"This file depends on sourcefile~~sourcery_file_m.f90~~EfferentGraph sourcefile~sourcery_file_m.f90 sourcery_file_m.f90 sourcefile~sourcery_string_m.f90 sourcery_string_m.f90 sourcefile~sourcery_file_m.f90->sourcefile~sourcery_string_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Files dependent on this one sourcefile~~sourcery_file_m.f90~~AfferentGraph sourcefile~sourcery_file_m.f90 sourcery_file_m.f90 sourcefile~sourcery_file_s.f90 sourcery_file_s.f90 sourcefile~sourcery_file_s.f90->sourcefile~sourcery_file_m.f90 sourcefile~sourcery_m.f90 sourcery_m.F90 sourcefile~sourcery_m.f90->sourcefile~sourcery_file_m.f90 sourcefile~sourcery_string_s.f90 sourcery_string_s.f90 sourcefile~sourcery_string_s.f90->sourcefile~sourcery_m.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Where possible, edges connecting nodes are\ngiven different colours to make them easier to distinguish in\nlarge graphs. Source Code module sourcery_file_m !! A representation of a file as an object use sourcery_string_m , only : string_t private public :: file_t type file_t private type ( string_t ), allocatable :: lines_ (:) contains procedure :: lines procedure :: write_lines end type interface file_t module function read_lines ( file_name ) result ( file_object ) implicit none type ( string_t ), intent ( in ) :: file_name type ( file_t ) file_object end function pure module function construct ( lines ) result ( file_object ) implicit none type ( string_t ), intent ( in ) :: lines (:) type ( file_t ) file_object end function end interface interface pure module function lines ( self ) result ( my_lines ) implicit none class ( file_t ), intent ( in ) :: self type ( string_t ), allocatable :: my_lines (:) end function impure elemental module subroutine write_lines ( self , file_name ) implicit none class ( file_t ), intent ( in ) :: self type ( string_t ), intent ( in ), optional :: file_name end subroutine end interface end module sourcery_file_m","tags":"","loc":"sourcefile/sourcery_file_m.f90.html"}]}